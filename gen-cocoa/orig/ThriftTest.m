/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "ThriftTest.h"

@implementation ThriftTestBonk

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMessage: (NSString *) message type: (int32_t) type
{
  self = [super init];
  __message = [message retain_stub];
  __message_isset = YES;
  __type = type;
  __type_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeInt32ForKey: @"type"];
    __type_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__type_isset)
  {
    [encoder encodeInt32: __type forKey: @"type"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [@(__type) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestBonk class]]) {
    return NO;
  }
  ThriftTestBonk *other = (ThriftTestBonk *)anObject;
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && (__type != other->__type))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [super dealloc_stub];
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (int32_t) type {
  return __type;
}

- (void) setType: (int32_t) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Bonk"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestBonk("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ThriftTestBools

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithIm_true: (BOOL) im_true im_false: (BOOL) im_false
{
  self = [super init];
  __im_true = im_true;
  __im_true_isset = YES;
  __im_false = im_false;
  __im_false_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"im_true"])
  {
    __im_true = [decoder decodeBoolForKey: @"im_true"];
    __im_true_isset = YES;
  }
  if ([decoder containsValueForKey: @"im_false"])
  {
    __im_false = [decoder decodeBoolForKey: @"im_false"];
    __im_false_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__im_true_isset)
  {
    [encoder encodeBool: __im_true forKey: @"im_true"];
  }
  if (__im_false_isset)
  {
    [encoder encodeBool: __im_false forKey: @"im_false"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __im_true_isset ? 2654435761 : 0;
  if (__im_true_isset)
  {
    hash = (hash * 31) ^ [@(__im_true) hash];
  }
  hash = (hash * 31) ^ __im_false_isset ? 2654435761 : 0;
  if (__im_false_isset)
  {
    hash = (hash * 31) ^ [@(__im_false) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestBools class]]) {
    return NO;
  }
  ThriftTestBools *other = (ThriftTestBools *)anObject;
  if ((__im_true_isset != other->__im_true_isset) ||
      (__im_true_isset && (__im_true != other->__im_true))) {
    return NO;
  }
  if ((__im_false_isset != other->__im_false_isset) ||
      (__im_false_isset && (__im_false != other->__im_false))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) im_true {
  return __im_true;
}

- (void) setIm_true: (BOOL) im_true {
  __im_true = im_true;
  __im_true_isset = YES;
}

- (BOOL) im_trueIsSet {
  return __im_true_isset;
}

- (void) unsetIm_true {
  __im_true_isset = NO;
}

- (BOOL) im_false {
  return __im_false;
}

- (void) setIm_false: (BOOL) im_false {
  __im_false = im_false;
  __im_false_isset = YES;
}

- (BOOL) im_falseIsSet {
  return __im_false_isset;
}

- (void) unsetIm_false {
  __im_false_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIm_true: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIm_false: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Bools"];
  if (__im_true_isset) {
    [outProtocol writeFieldBeginWithName: @"im_true" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __im_true];
    [outProtocol writeFieldEnd];
  }
  if (__im_false_isset) {
    [outProtocol writeFieldBeginWithName: @"im_false" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __im_false];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestBools("];
  [ms appendString: @"im_true:"];
  [ms appendFormat: @"%i", __im_true];
  [ms appendString: @",im_false:"];
  [ms appendFormat: @"%i", __im_false];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ThriftTestXtruct

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithString_thing: (NSString *) string_thing byte_thing: (uint8_t) byte_thing i32_thing: (int32_t) i32_thing i64_thing: (int64_t) i64_thing
{
  self = [super init];
  __string_thing = [string_thing retain_stub];
  __string_thing_isset = YES;
  __byte_thing = byte_thing;
  __byte_thing_isset = YES;
  __i32_thing = i32_thing;
  __i32_thing_isset = YES;
  __i64_thing = i64_thing;
  __i64_thing_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"string_thing"])
  {
    __string_thing = [[decoder decodeObjectForKey: @"string_thing"] retain_stub];
    __string_thing_isset = YES;
  }
  if ([decoder containsValueForKey: @"byte_thing"])
  {
    __byte_thing = [decoder decodeIntForKey: @"byte_thing"];
    __byte_thing_isset = YES;
  }
  if ([decoder containsValueForKey: @"i32_thing"])
  {
    __i32_thing = [decoder decodeInt32ForKey: @"i32_thing"];
    __i32_thing_isset = YES;
  }
  if ([decoder containsValueForKey: @"i64_thing"])
  {
    __i64_thing = [decoder decodeInt64ForKey: @"i64_thing"];
    __i64_thing_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__string_thing_isset)
  {
    [encoder encodeObject: __string_thing forKey: @"string_thing"];
  }
  if (__byte_thing_isset)
  {
    [encoder encodeInt: __byte_thing forKey: @"byte_thing"];
  }
  if (__i32_thing_isset)
  {
    [encoder encodeInt32: __i32_thing forKey: @"i32_thing"];
  }
  if (__i64_thing_isset)
  {
    [encoder encodeInt64: __i64_thing forKey: @"i64_thing"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __string_thing_isset ? 2654435761 : 0;
  if (__string_thing_isset)
  {
    hash = (hash * 31) ^ [__string_thing hash];
  }
  hash = (hash * 31) ^ __byte_thing_isset ? 2654435761 : 0;
  if (__byte_thing_isset)
  {
    hash = (hash * 31) ^ [@(__byte_thing) hash];
  }
  hash = (hash * 31) ^ __i32_thing_isset ? 2654435761 : 0;
  if (__i32_thing_isset)
  {
    hash = (hash * 31) ^ [@(__i32_thing) hash];
  }
  hash = (hash * 31) ^ __i64_thing_isset ? 2654435761 : 0;
  if (__i64_thing_isset)
  {
    hash = (hash * 31) ^ [@(__i64_thing) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestXtruct class]]) {
    return NO;
  }
  ThriftTestXtruct *other = (ThriftTestXtruct *)anObject;
  if ((__string_thing_isset != other->__string_thing_isset) ||
      (__string_thing_isset && ((__string_thing || other->__string_thing) && ![__string_thing isEqual:other->__string_thing]))) {
    return NO;
  }
  if ((__byte_thing_isset != other->__byte_thing_isset) ||
      (__byte_thing_isset && (__byte_thing != other->__byte_thing))) {
    return NO;
  }
  if ((__i32_thing_isset != other->__i32_thing_isset) ||
      (__i32_thing_isset && (__i32_thing != other->__i32_thing))) {
    return NO;
  }
  if ((__i64_thing_isset != other->__i64_thing_isset) ||
      (__i64_thing_isset && (__i64_thing != other->__i64_thing))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__string_thing release_stub];
  [super dealloc_stub];
}

- (NSString *) string_thing {
  return [[__string_thing retain_stub] autorelease_stub];
}

- (void) setString_thing: (NSString *) string_thing {
  [string_thing retain_stub];
  [__string_thing release_stub];
  __string_thing = string_thing;
  __string_thing_isset = YES;
}

- (BOOL) string_thingIsSet {
  return __string_thing_isset;
}

- (void) unsetString_thing {
  [__string_thing release_stub];
  __string_thing = nil;
  __string_thing_isset = NO;
}

- (uint8_t) byte_thing {
  return __byte_thing;
}

- (void) setByte_thing: (uint8_t) byte_thing {
  __byte_thing = byte_thing;
  __byte_thing_isset = YES;
}

- (BOOL) byte_thingIsSet {
  return __byte_thing_isset;
}

- (void) unsetByte_thing {
  __byte_thing_isset = NO;
}

- (int32_t) i32_thing {
  return __i32_thing;
}

- (void) setI32_thing: (int32_t) i32_thing {
  __i32_thing = i32_thing;
  __i32_thing_isset = YES;
}

- (BOOL) i32_thingIsSet {
  return __i32_thing_isset;
}

- (void) unsetI32_thing {
  __i32_thing_isset = NO;
}

- (int64_t) i64_thing {
  return __i64_thing;
}

- (void) setI64_thing: (int64_t) i64_thing {
  __i64_thing = i64_thing;
  __i64_thing_isset = YES;
}

- (BOOL) i64_thingIsSet {
  return __i64_thing_isset;
}

- (void) unsetI64_thing {
  __i64_thing_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setString_thing: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setByte_thing: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setI32_thing: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setI64_thing: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Xtruct"];
  if (__string_thing_isset) {
    if (__string_thing != nil) {
      [outProtocol writeFieldBeginWithName: @"string_thing" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __string_thing];
      [outProtocol writeFieldEnd];
    }
  }
  if (__byte_thing_isset) {
    [outProtocol writeFieldBeginWithName: @"byte_thing" type: TType_BYTE fieldID: 4];
    [outProtocol writeByte: __byte_thing];
    [outProtocol writeFieldEnd];
  }
  if (__i32_thing_isset) {
    [outProtocol writeFieldBeginWithName: @"i32_thing" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __i32_thing];
    [outProtocol writeFieldEnd];
  }
  if (__i64_thing_isset) {
    [outProtocol writeFieldBeginWithName: @"i64_thing" type: TType_I64 fieldID: 11];
    [outProtocol writeI64: __i64_thing];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestXtruct("];
  [ms appendString: @"string_thing:"];
  [ms appendFormat: @"\"%@\"", __string_thing];
  [ms appendString: @",byte_thing:"];
  [ms appendFormat: @"%i", __byte_thing];
  [ms appendString: @",i32_thing:"];
  [ms appendFormat: @"%i", __i32_thing];
  [ms appendString: @",i64_thing:"];
  [ms appendFormat: @"%qi", __i64_thing];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ThriftTestXtruct2

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithByte_thing: (uint8_t) byte_thing struct_thing: (ThriftTestXtruct *) struct_thing i32_thing: (int32_t) i32_thing
{
  self = [super init];
  __byte_thing = byte_thing;
  __byte_thing_isset = YES;
  __struct_thing = [struct_thing retain_stub];
  __struct_thing_isset = YES;
  __i32_thing = i32_thing;
  __i32_thing_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"byte_thing"])
  {
    __byte_thing = [decoder decodeIntForKey: @"byte_thing"];
    __byte_thing_isset = YES;
  }
  if ([decoder containsValueForKey: @"struct_thing"])
  {
    __struct_thing = [[decoder decodeObjectForKey: @"struct_thing"] retain_stub];
    __struct_thing_isset = YES;
  }
  if ([decoder containsValueForKey: @"i32_thing"])
  {
    __i32_thing = [decoder decodeInt32ForKey: @"i32_thing"];
    __i32_thing_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__byte_thing_isset)
  {
    [encoder encodeInt: __byte_thing forKey: @"byte_thing"];
  }
  if (__struct_thing_isset)
  {
    [encoder encodeObject: __struct_thing forKey: @"struct_thing"];
  }
  if (__i32_thing_isset)
  {
    [encoder encodeInt32: __i32_thing forKey: @"i32_thing"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __byte_thing_isset ? 2654435761 : 0;
  if (__byte_thing_isset)
  {
    hash = (hash * 31) ^ [@(__byte_thing) hash];
  }
  hash = (hash * 31) ^ __struct_thing_isset ? 2654435761 : 0;
  if (__struct_thing_isset)
  {
    hash = (hash * 31) ^ [__struct_thing hash];
  }
  hash = (hash * 31) ^ __i32_thing_isset ? 2654435761 : 0;
  if (__i32_thing_isset)
  {
    hash = (hash * 31) ^ [@(__i32_thing) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestXtruct2 class]]) {
    return NO;
  }
  ThriftTestXtruct2 *other = (ThriftTestXtruct2 *)anObject;
  if ((__byte_thing_isset != other->__byte_thing_isset) ||
      (__byte_thing_isset && (__byte_thing != other->__byte_thing))) {
    return NO;
  }
  if ((__struct_thing_isset != other->__struct_thing_isset) ||
      (__struct_thing_isset && ((__struct_thing || other->__struct_thing) && ![__struct_thing isEqual:other->__struct_thing]))) {
    return NO;
  }
  if ((__i32_thing_isset != other->__i32_thing_isset) ||
      (__i32_thing_isset && (__i32_thing != other->__i32_thing))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__struct_thing release_stub];
  [super dealloc_stub];
}

- (uint8_t) byte_thing {
  return __byte_thing;
}

- (void) setByte_thing: (uint8_t) byte_thing {
  __byte_thing = byte_thing;
  __byte_thing_isset = YES;
}

- (BOOL) byte_thingIsSet {
  return __byte_thing_isset;
}

- (void) unsetByte_thing {
  __byte_thing_isset = NO;
}

- (ThriftTestXtruct *) struct_thing {
  return [[__struct_thing retain_stub] autorelease_stub];
}

- (void) setStruct_thing: (ThriftTestXtruct *) struct_thing {
  [struct_thing retain_stub];
  [__struct_thing release_stub];
  __struct_thing = struct_thing;
  __struct_thing_isset = YES;
}

- (BOOL) struct_thingIsSet {
  return __struct_thing_isset;
}

- (void) unsetStruct_thing {
  [__struct_thing release_stub];
  __struct_thing = nil;
  __struct_thing_isset = NO;
}

- (int32_t) i32_thing {
  return __i32_thing;
}

- (void) setI32_thing: (int32_t) i32_thing {
  __i32_thing = i32_thing;
  __i32_thing_isset = YES;
}

- (BOOL) i32_thingIsSet {
  return __i32_thing_isset;
}

- (void) unsetI32_thing {
  __i32_thing_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setByte_thing: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          ThriftTestXtruct *fieldValue = [[ThriftTestXtruct alloc] init];
          [fieldValue read: inProtocol];
          [self setStruct_thing: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setI32_thing: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Xtruct2"];
  if (__byte_thing_isset) {
    [outProtocol writeFieldBeginWithName: @"byte_thing" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: __byte_thing];
    [outProtocol writeFieldEnd];
  }
  if (__struct_thing_isset) {
    if (__struct_thing != nil) {
      [outProtocol writeFieldBeginWithName: @"struct_thing" type: TType_STRUCT fieldID: 2];
      [__struct_thing write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__i32_thing_isset) {
    [outProtocol writeFieldBeginWithName: @"i32_thing" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __i32_thing];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestXtruct2("];
  [ms appendString: @"byte_thing:"];
  [ms appendFormat: @"%i", __byte_thing];
  [ms appendString: @",struct_thing:"];
  [ms appendFormat: @"%@", __struct_thing];
  [ms appendString: @",i32_thing:"];
  [ms appendFormat: @"%i", __i32_thing];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ThriftTestXtruct3

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithString_thing: (NSString *) string_thing changed: (int32_t) changed i32_thing: (int32_t) i32_thing i64_thing: (int64_t) i64_thing
{
  self = [super init];
  __string_thing = [string_thing retain_stub];
  __string_thing_isset = YES;
  __changed = changed;
  __changed_isset = YES;
  __i32_thing = i32_thing;
  __i32_thing_isset = YES;
  __i64_thing = i64_thing;
  __i64_thing_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"string_thing"])
  {
    __string_thing = [[decoder decodeObjectForKey: @"string_thing"] retain_stub];
    __string_thing_isset = YES;
  }
  if ([decoder containsValueForKey: @"changed"])
  {
    __changed = [decoder decodeInt32ForKey: @"changed"];
    __changed_isset = YES;
  }
  if ([decoder containsValueForKey: @"i32_thing"])
  {
    __i32_thing = [decoder decodeInt32ForKey: @"i32_thing"];
    __i32_thing_isset = YES;
  }
  if ([decoder containsValueForKey: @"i64_thing"])
  {
    __i64_thing = [decoder decodeInt64ForKey: @"i64_thing"];
    __i64_thing_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__string_thing_isset)
  {
    [encoder encodeObject: __string_thing forKey: @"string_thing"];
  }
  if (__changed_isset)
  {
    [encoder encodeInt32: __changed forKey: @"changed"];
  }
  if (__i32_thing_isset)
  {
    [encoder encodeInt32: __i32_thing forKey: @"i32_thing"];
  }
  if (__i64_thing_isset)
  {
    [encoder encodeInt64: __i64_thing forKey: @"i64_thing"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __string_thing_isset ? 2654435761 : 0;
  if (__string_thing_isset)
  {
    hash = (hash * 31) ^ [__string_thing hash];
  }
  hash = (hash * 31) ^ __changed_isset ? 2654435761 : 0;
  if (__changed_isset)
  {
    hash = (hash * 31) ^ [@(__changed) hash];
  }
  hash = (hash * 31) ^ __i32_thing_isset ? 2654435761 : 0;
  if (__i32_thing_isset)
  {
    hash = (hash * 31) ^ [@(__i32_thing) hash];
  }
  hash = (hash * 31) ^ __i64_thing_isset ? 2654435761 : 0;
  if (__i64_thing_isset)
  {
    hash = (hash * 31) ^ [@(__i64_thing) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestXtruct3 class]]) {
    return NO;
  }
  ThriftTestXtruct3 *other = (ThriftTestXtruct3 *)anObject;
  if ((__string_thing_isset != other->__string_thing_isset) ||
      (__string_thing_isset && ((__string_thing || other->__string_thing) && ![__string_thing isEqual:other->__string_thing]))) {
    return NO;
  }
  if ((__changed_isset != other->__changed_isset) ||
      (__changed_isset && (__changed != other->__changed))) {
    return NO;
  }
  if ((__i32_thing_isset != other->__i32_thing_isset) ||
      (__i32_thing_isset && (__i32_thing != other->__i32_thing))) {
    return NO;
  }
  if ((__i64_thing_isset != other->__i64_thing_isset) ||
      (__i64_thing_isset && (__i64_thing != other->__i64_thing))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__string_thing release_stub];
  [super dealloc_stub];
}

- (NSString *) string_thing {
  return [[__string_thing retain_stub] autorelease_stub];
}

- (void) setString_thing: (NSString *) string_thing {
  [string_thing retain_stub];
  [__string_thing release_stub];
  __string_thing = string_thing;
  __string_thing_isset = YES;
}

- (BOOL) string_thingIsSet {
  return __string_thing_isset;
}

- (void) unsetString_thing {
  [__string_thing release_stub];
  __string_thing = nil;
  __string_thing_isset = NO;
}

- (int32_t) changed {
  return __changed;
}

- (void) setChanged: (int32_t) changed {
  __changed = changed;
  __changed_isset = YES;
}

- (BOOL) changedIsSet {
  return __changed_isset;
}

- (void) unsetChanged {
  __changed_isset = NO;
}

- (int32_t) i32_thing {
  return __i32_thing;
}

- (void) setI32_thing: (int32_t) i32_thing {
  __i32_thing = i32_thing;
  __i32_thing_isset = YES;
}

- (BOOL) i32_thingIsSet {
  return __i32_thing_isset;
}

- (void) unsetI32_thing {
  __i32_thing_isset = NO;
}

- (int64_t) i64_thing {
  return __i64_thing;
}

- (void) setI64_thing: (int64_t) i64_thing {
  __i64_thing = i64_thing;
  __i64_thing_isset = YES;
}

- (BOOL) i64_thingIsSet {
  return __i64_thing_isset;
}

- (void) unsetI64_thing {
  __i64_thing_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setString_thing: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setChanged: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setI32_thing: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setI64_thing: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Xtruct3"];
  if (__string_thing_isset) {
    if (__string_thing != nil) {
      [outProtocol writeFieldBeginWithName: @"string_thing" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __string_thing];
      [outProtocol writeFieldEnd];
    }
  }
  if (__changed_isset) {
    [outProtocol writeFieldBeginWithName: @"changed" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __changed];
    [outProtocol writeFieldEnd];
  }
  if (__i32_thing_isset) {
    [outProtocol writeFieldBeginWithName: @"i32_thing" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __i32_thing];
    [outProtocol writeFieldEnd];
  }
  if (__i64_thing_isset) {
    [outProtocol writeFieldBeginWithName: @"i64_thing" type: TType_I64 fieldID: 11];
    [outProtocol writeI64: __i64_thing];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestXtruct3("];
  [ms appendString: @"string_thing:"];
  [ms appendFormat: @"\"%@\"", __string_thing];
  [ms appendString: @",changed:"];
  [ms appendFormat: @"%i", __changed];
  [ms appendString: @",i32_thing:"];
  [ms appendFormat: @"%i", __i32_thing];
  [ms appendString: @",i64_thing:"];
  [ms appendFormat: @"%qi", __i64_thing];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ThriftTestInsanity

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUserMap: (NSMutableDictionary *) userMap xtructs: (NSMutableArray *) xtructs
{
  self = [super init];
  __userMap = [userMap retain_stub];
  __userMap_isset = YES;
  __xtructs = [xtructs retain_stub];
  __xtructs_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"userMap"])
  {
    __userMap = [[decoder decodeObjectForKey: @"userMap"] retain_stub];
    __userMap_isset = YES;
  }
  if ([decoder containsValueForKey: @"xtructs"])
  {
    __xtructs = [[decoder decodeObjectForKey: @"xtructs"] retain_stub];
    __xtructs_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__userMap_isset)
  {
    [encoder encodeObject: __userMap forKey: @"userMap"];
  }
  if (__xtructs_isset)
  {
    [encoder encodeObject: __xtructs forKey: @"xtructs"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __userMap_isset ? 2654435761 : 0;
  if (__userMap_isset)
  {
    hash = (hash * 31) ^ [__userMap hash];
  }
  hash = (hash * 31) ^ __xtructs_isset ? 2654435761 : 0;
  if (__xtructs_isset)
  {
    hash = (hash * 31) ^ [__xtructs hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestInsanity class]]) {
    return NO;
  }
  ThriftTestInsanity *other = (ThriftTestInsanity *)anObject;
  if ((__userMap_isset != other->__userMap_isset) ||
      (__userMap_isset && ((__userMap || other->__userMap) && ![__userMap isEqual:other->__userMap]))) {
    return NO;
  }
  if ((__xtructs_isset != other->__xtructs_isset) ||
      (__xtructs_isset && ((__xtructs || other->__xtructs) && ![__xtructs isEqual:other->__xtructs]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__userMap release_stub];
  [__xtructs release_stub];
  [super dealloc_stub];
}

- (NSMutableDictionary *) userMap {
  return [[__userMap retain_stub] autorelease_stub];
}

- (void) setUserMap: (NSMutableDictionary *) userMap {
  [userMap retain_stub];
  [__userMap release_stub];
  __userMap = userMap;
  __userMap_isset = YES;
}

- (BOOL) userMapIsSet {
  return __userMap_isset;
}

- (void) unsetUserMap {
  [__userMap release_stub];
  __userMap = nil;
  __userMap_isset = NO;
}

- (NSMutableArray *) xtructs {
  return [[__xtructs retain_stub] autorelease_stub];
}

- (void) setXtructs: (NSMutableArray *) xtructs {
  [xtructs retain_stub];
  [__xtructs release_stub];
  __xtructs = xtructs;
  __xtructs_isset = YES;
}

- (BOOL) xtructsIsSet {
  return __xtructs_isset;
}

- (void) unsetXtructs {
  [__xtructs release_stub];
  __xtructs = nil;
  __xtructs_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_MAP) {
          int _size0;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size0];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            int _key2 = [inProtocol readI32];
            int64_t _val3 = [inProtocol readI64];
            [fieldValue setObject: [NSNumber numberWithLongLong: _val3] forKey: [NSNumber numberWithInt: _key2]];
          }
          [inProtocol readMapEnd];
          [self setUserMap: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size4;
          [inProtocol readListBeginReturningElementType: NULL size: &_size4];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size4];
          int _i5;
          for (_i5 = 0; _i5 < _size4; ++_i5)
          {
            ThriftTestXtruct *_elem6 = [[ThriftTestXtruct alloc] init];
            [_elem6 read: inProtocol];
            [fieldValue addObject: _elem6];
            [_elem6 release_stub];
          }
          [inProtocol readListEnd];
          [self setXtructs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Insanity"];
  if (__userMap_isset) {
    if (__userMap != nil) {
      [outProtocol writeFieldBeginWithName: @"userMap" type: TType_MAP fieldID: 1];
      {
        [outProtocol writeMapBeginWithKeyType: TType_I32 valueType: TType_I64 size: [__userMap count]];
        NSEnumerator * _iter7 = [__userMap keyEnumerator];
        id key8;
        while ((key8 = [_iter7 nextObject]))
        {
          [outProtocol writeI32: [key8 intValue]];
          [outProtocol writeI64: [[__userMap objectForKey: key8] longLongValue]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__xtructs_isset) {
    if (__xtructs != nil) {
      [outProtocol writeFieldBeginWithName: @"xtructs" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__xtructs count]];
        int idx10;
        for (idx10 = 0; idx10 < [__xtructs count]; idx10++)
        {
          [[__xtructs objectAtIndex: idx10] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestInsanity("];
  [ms appendString: @"userMap:"];
  [ms appendFormat: @"%@", __userMap];
  [ms appendString: @",xtructs:"];
  [ms appendFormat: @"%@", __xtructs];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ThriftTestCrazyNesting

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithString_field: (NSString *) string_field set_field: (NSMutableSet *) set_field list_field: (NSMutableArray *) list_field binary_field: (NSData *) binary_field
{
  self = [super init];
  __string_field = [string_field retain_stub];
  __string_field_isset = YES;
  __set_field = [set_field retain_stub];
  __set_field_isset = YES;
  __list_field = [list_field retain_stub];
  __list_field_isset = YES;
  __binary_field = [binary_field retain_stub];
  __binary_field_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"string_field"])
  {
    __string_field = [[decoder decodeObjectForKey: @"string_field"] retain_stub];
    __string_field_isset = YES;
  }
  if ([decoder containsValueForKey: @"set_field"])
  {
    __set_field = [[decoder decodeObjectForKey: @"set_field"] retain_stub];
    __set_field_isset = YES;
  }
  if ([decoder containsValueForKey: @"list_field"])
  {
    __list_field = [[decoder decodeObjectForKey: @"list_field"] retain_stub];
    __list_field_isset = YES;
  }
  if ([decoder containsValueForKey: @"binary_field"])
  {
    __binary_field = [[decoder decodeObjectForKey: @"binary_field"] retain_stub];
    __binary_field_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__string_field_isset)
  {
    [encoder encodeObject: __string_field forKey: @"string_field"];
  }
  if (__set_field_isset)
  {
    [encoder encodeObject: __set_field forKey: @"set_field"];
  }
  if (__list_field_isset)
  {
    [encoder encodeObject: __list_field forKey: @"list_field"];
  }
  if (__binary_field_isset)
  {
    [encoder encodeObject: __binary_field forKey: @"binary_field"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __string_field_isset ? 2654435761 : 0;
  if (__string_field_isset)
  {
    hash = (hash * 31) ^ [__string_field hash];
  }
  hash = (hash * 31) ^ __set_field_isset ? 2654435761 : 0;
  if (__set_field_isset)
  {
    hash = (hash * 31) ^ [__set_field hash];
  }
  hash = (hash * 31) ^ __list_field_isset ? 2654435761 : 0;
  if (__list_field_isset)
  {
    hash = (hash * 31) ^ [__list_field hash];
  }
  hash = (hash * 31) ^ __binary_field_isset ? 2654435761 : 0;
  if (__binary_field_isset)
  {
    hash = (hash * 31) ^ [__binary_field hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestCrazyNesting class]]) {
    return NO;
  }
  ThriftTestCrazyNesting *other = (ThriftTestCrazyNesting *)anObject;
  if ((__string_field_isset != other->__string_field_isset) ||
      (__string_field_isset && ((__string_field || other->__string_field) && ![__string_field isEqual:other->__string_field]))) {
    return NO;
  }
  if ((__set_field_isset != other->__set_field_isset) ||
      (__set_field_isset && ((__set_field || other->__set_field) && ![__set_field isEqual:other->__set_field]))) {
    return NO;
  }
  if ((__list_field_isset != other->__list_field_isset) ||
      (__list_field_isset && ((__list_field || other->__list_field) && ![__list_field isEqual:other->__list_field]))) {
    return NO;
  }
  if ((__binary_field_isset != other->__binary_field_isset) ||
      (__binary_field_isset && ((__binary_field || other->__binary_field) && ![__binary_field isEqual:other->__binary_field]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__string_field release_stub];
  [__set_field release_stub];
  [__list_field release_stub];
  [__binary_field release_stub];
  [super dealloc_stub];
}

- (NSString *) string_field {
  return [[__string_field retain_stub] autorelease_stub];
}

- (void) setString_field: (NSString *) string_field {
  [string_field retain_stub];
  [__string_field release_stub];
  __string_field = string_field;
  __string_field_isset = YES;
}

- (BOOL) string_fieldIsSet {
  return __string_field_isset;
}

- (void) unsetString_field {
  [__string_field release_stub];
  __string_field = nil;
  __string_field_isset = NO;
}

- (NSMutableSet *) set_field {
  return [[__set_field retain_stub] autorelease_stub];
}

- (void) setSet_field: (NSMutableSet *) set_field {
  [set_field retain_stub];
  [__set_field release_stub];
  __set_field = set_field;
  __set_field_isset = YES;
}

- (BOOL) set_fieldIsSet {
  return __set_field_isset;
}

- (void) unsetSet_field {
  [__set_field release_stub];
  __set_field = nil;
  __set_field_isset = NO;
}

- (NSMutableArray *) list_field {
  return [[__list_field retain_stub] autorelease_stub];
}

- (void) setList_field: (NSMutableArray *) list_field {
  [list_field retain_stub];
  [__list_field release_stub];
  __list_field = list_field;
  __list_field_isset = YES;
}

- (BOOL) list_fieldIsSet {
  return __list_field_isset;
}

- (void) unsetList_field {
  [__list_field release_stub];
  __list_field = nil;
  __list_field_isset = NO;
}

- (NSData *) binary_field {
  return [[__binary_field retain_stub] autorelease_stub];
}

- (void) setBinary_field: (NSData *) binary_field {
  [binary_field retain_stub];
  [__binary_field release_stub];
  __binary_field = binary_field;
  __binary_field_isset = YES;
}

- (BOOL) binary_fieldIsSet {
  return __binary_field_isset;
}

- (void) unsetBinary_field {
  [__binary_field release_stub];
  __binary_field = nil;
  __binary_field_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setString_field: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_SET) {
          int _size11;
          [inProtocol readSetBeginReturningElementType: NULL size: &_size11];
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size11];
          int _i12;
          for (_i12 = 0; _i12 < _size11; ++_i12)
          {
            ThriftTestInsanity *_elem13 = [[ThriftTestInsanity alloc] init];
            [_elem13 read: inProtocol];
            [fieldValue addObject: _elem13];
            [_elem13 release_stub];
          }
          [inProtocol readSetEnd];
          [self setSet_field: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size14;
          [inProtocol readListBeginReturningElementType: NULL size: &_size14];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size14];
          int _i15;
          for (_i15 = 0; _i15 < _size14; ++_i15)
          {
            int _size17;
            [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size17];
            NSMutableDictionary * _elem16 = [[NSMutableDictionary alloc] initWithCapacity: _size17];
            int _i18;
            for (_i18 = 0; _i18 < _size17; ++_i18)
            {
              int _size21;
              [inProtocol readSetBeginReturningElementType: NULL size: &_size21];
              NSMutableSet * _key19 = [[NSMutableSet alloc] initWithCapacity: _size21];
              int _i22;
              for (_i22 = 0; _i22 < _size21; ++_i22)
              {
                int32_t _elem23 = [inProtocol readI32];
                [_key19 addObject: [NSNumber numberWithLong: _elem23]];
              }
              [inProtocol readSetEnd];
              int _size24;
              [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size24];
              NSMutableDictionary * _val20 = [[NSMutableDictionary alloc] initWithCapacity: _size24];
              int _i25;
              for (_i25 = 0; _i25 < _size24; ++_i25)
              {
                int32_t _key26 = [inProtocol readI32];
                int _size28;
                [inProtocol readSetBeginReturningElementType: NULL size: &_size28];
                NSMutableSet * _val27 = [[NSMutableSet alloc] initWithCapacity: _size28];
                int _i29;
                for (_i29 = 0; _i29 < _size28; ++_i29)
                {
                  int _size31;
                  [inProtocol readListBeginReturningElementType: NULL size: &_size31];
                  NSMutableArray * _elem30 = [[NSMutableArray alloc] initWithCapacity: _size31];
                  int _i32;
                  for (_i32 = 0; _i32 < _size31; ++_i32)
                  {
                    int _size34;
                    [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size34];
                    NSMutableDictionary * _elem33 = [[NSMutableDictionary alloc] initWithCapacity: _size34];
                    int _i35;
                    for (_i35 = 0; _i35 < _size34; ++_i35)
                    {
                      ThriftTestInsanity *_key36 = [[ThriftTestInsanity alloc] init];
                      [_key36 read: inProtocol];
                      NSString * _val37 = [inProtocol readString];
                      [_elem33 setObject: _val37 forKey: _key36];
                      [_key36 release_stub];
                    }
                    [inProtocol readMapEnd];
                    [_elem30 addObject: _elem33];
                    [_elem33 release_stub];
                  }
                  [inProtocol readListEnd];
                  [_val27 addObject: _elem30];
                  [_elem30 release_stub];
                }
                [inProtocol readSetEnd];
                [_val20 setObject: _val27 forKey: [NSNumber numberWithLong: _key26]];
                [_val27 release_stub];
              }
              [inProtocol readMapEnd];
              [_elem16 setObject: _val20 forKey: _key19];
              [_key19 release_stub];
              [_val20 release_stub];
            }
            [inProtocol readMapEnd];
            [fieldValue addObject: _elem16];
            [_elem16 release_stub];
          }
          [inProtocol readListEnd];
          [self setList_field: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setBinary_field: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CrazyNesting"];
  if (__string_field_isset) {
    if (__string_field != nil) {
      [outProtocol writeFieldBeginWithName: @"string_field" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __string_field];
      [outProtocol writeFieldEnd];
    }
  }
  if (__set_field_isset) {
    if (__set_field != nil) {
      [outProtocol writeFieldBeginWithName: @"set_field" type: TType_SET fieldID: 2];
      {
        [outProtocol writeSetBeginWithElementType: TType_STRUCT size: [__set_field count]];
        NSEnumerator * _iter38 = [__set_field objectEnumerator];
        id obj39;
        while ((obj39 = [_iter38 nextObject]))
        {
          [obj39 write: outProtocol];
        }
        [outProtocol writeSetEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__list_field_isset) {
    if (__list_field != nil) {
      [outProtocol writeFieldBeginWithName: @"list_field" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_MAP size: [__list_field count]];
        int idx41;
        for (idx41 = 0; idx41 < [__list_field count]; idx41++)
        {
          {
            [outProtocol writeMapBeginWithKeyType: TType_SET valueType: TType_MAP size: [[__list_field objectAtIndex: idx41] count]];
            NSEnumerator * _iter42 = [[__list_field objectAtIndex: idx41] keyEnumerator];
            id key43;
            while ((key43 = [_iter42 nextObject]))
            {
              {
                [outProtocol writeSetBeginWithElementType: TType_I32 size: [key43 count]];
                NSEnumerator * _iter44 = [key43 objectEnumerator];
                id obj45;
                while ((obj45 = [_iter44 nextObject]))
                {
                  [outProtocol writeI32: [obj45 longValue]];
                }
                [outProtocol writeSetEnd];
              }
              {
                [outProtocol writeMapBeginWithKeyType: TType_I32 valueType: TType_SET size: [[[__list_field objectAtIndex: idx41] objectForKey: key43] count]];
                NSEnumerator * _iter46 = [[[__list_field objectAtIndex: idx41] objectForKey: key43] keyEnumerator];
                id key47;
                while ((key47 = [_iter46 nextObject]))
                {
                  [outProtocol writeI32: [key47 longValue]];
                  {
                    [outProtocol writeSetBeginWithElementType: TType_LIST size: [[[[__list_field objectAtIndex: idx41] objectForKey: key43] objectForKey: key47] count]];
                    NSEnumerator * _iter48 = [[[[__list_field objectAtIndex: idx41] objectForKey: key43] objectForKey: key47] objectEnumerator];
                    id obj49;
                    while ((obj49 = [_iter48 nextObject]))
                    {
                      {
                        [outProtocol writeListBeginWithElementType: TType_MAP size: [obj49 count]];
                        int idx51;
                        for (idx51 = 0; idx51 < [obj49 count]; idx51++)
                        {
                          {
                            [outProtocol writeMapBeginWithKeyType: TType_STRUCT valueType: TType_STRING size: [[obj49 objectAtIndex: idx51] count]];
                            NSEnumerator * _iter52 = [[obj49 objectAtIndex: idx51] keyEnumerator];
                            id key53;
                            while ((key53 = [_iter52 nextObject]))
                            {
                              [key53 write: outProtocol];
                              [outProtocol writeString: [[obj49 objectAtIndex: idx51] objectForKey: key53]];
                            }
                            [outProtocol writeMapEnd];
                          }
                        }
                        [outProtocol writeListEnd];
                      }
                    }
                    [outProtocol writeSetEnd];
                  }
                }
                [outProtocol writeMapEnd];
              }
            }
            [outProtocol writeMapEnd];
          }
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__binary_field_isset) {
    if (__binary_field != nil) {
      [outProtocol writeFieldBeginWithName: @"binary_field" type: TType_STRING fieldID: 4];
      [outProtocol writeBinary: __binary_field];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__list_field_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'list_field' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestCrazyNesting("];
  [ms appendString: @"string_field:"];
  [ms appendFormat: @"\"%@\"", __string_field];
  [ms appendString: @",set_field:"];
  [ms appendFormat: @"%@", __set_field];
  [ms appendString: @",list_field:"];
  [ms appendFormat: @"%@", __list_field];
  [ms appendString: @",binary_field:"];
  [ms appendFormat: @"\"%@\"", __binary_field];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ThriftTestXception

- (id) init
{
  return [super initWithName: @"ThriftTestXception" reason: @"unknown" userInfo: nil];
}

- (id) initWithErrorCode: (int32_t) errorCode message: (NSString *) message
{
  self = [self init];
  __errorCode = errorCode;
  __errorCode_isset = YES;
  __message = [message retain_stub];
  __message_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if ([decoder containsValueForKey: @"errorCode"])
  {
    __errorCode = [decoder decodeInt32ForKey: @"errorCode"];
    __errorCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (__errorCode_isset)
  {
    [encoder encodeInt32: __errorCode forKey: @"errorCode"];
  }
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __errorCode_isset ? 2654435761 : 0;
  if (__errorCode_isset)
  {
    hash = (hash * 31) ^ [@(__errorCode) hash];
  }
  hash = (hash * 31) ^ __message_isset ? 2654435761 : 0;
  if (__message_isset)
  {
    hash = (hash * 31) ^ [__message hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestXception class]]) {
    return NO;
  }
  ThriftTestXception *other = (ThriftTestXception *)anObject;
  if ((__errorCode_isset != other->__errorCode_isset) ||
      (__errorCode_isset && (__errorCode != other->__errorCode))) {
    return NO;
  }
  if ((__message_isset != other->__message_isset) ||
      (__message_isset && ((__message || other->__message) && ![__message isEqual:other->__message]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__message release_stub];
  [super dealloc_stub];
}

- (int32_t) errorCode {
  return __errorCode;
}

- (void) setErrorCode: (int32_t) errorCode {
  __errorCode = errorCode;
  __errorCode_isset = YES;
}

- (BOOL) errorCodeIsSet {
  return __errorCode_isset;
}

- (void) unsetErrorCode {
  __errorCode_isset = NO;
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setErrorCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Xception"];
  if (__errorCode_isset) {
    [outProtocol writeFieldBeginWithName: @"errorCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __errorCode];
    [outProtocol writeFieldEnd];
  }
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestXception("];
  [ms appendString: @"errorCode:"];
  [ms appendFormat: @"%i", __errorCode];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ThriftTestXception2

- (id) init
{
  return [super initWithName: @"ThriftTestXception2" reason: @"unknown" userInfo: nil];
}

- (id) initWithErrorCode: (int32_t) errorCode struct_thing: (ThriftTestXtruct *) struct_thing
{
  self = [self init];
  __errorCode = errorCode;
  __errorCode_isset = YES;
  __struct_thing = [struct_thing retain_stub];
  __struct_thing_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if ([decoder containsValueForKey: @"errorCode"])
  {
    __errorCode = [decoder decodeInt32ForKey: @"errorCode"];
    __errorCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"struct_thing"])
  {
    __struct_thing = [[decoder decodeObjectForKey: @"struct_thing"] retain_stub];
    __struct_thing_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (__errorCode_isset)
  {
    [encoder encodeInt32: __errorCode forKey: @"errorCode"];
  }
  if (__struct_thing_isset)
  {
    [encoder encodeObject: __struct_thing forKey: @"struct_thing"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __errorCode_isset ? 2654435761 : 0;
  if (__errorCode_isset)
  {
    hash = (hash * 31) ^ [@(__errorCode) hash];
  }
  hash = (hash * 31) ^ __struct_thing_isset ? 2654435761 : 0;
  if (__struct_thing_isset)
  {
    hash = (hash * 31) ^ [__struct_thing hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestXception2 class]]) {
    return NO;
  }
  ThriftTestXception2 *other = (ThriftTestXception2 *)anObject;
  if ((__errorCode_isset != other->__errorCode_isset) ||
      (__errorCode_isset && (__errorCode != other->__errorCode))) {
    return NO;
  }
  if ((__struct_thing_isset != other->__struct_thing_isset) ||
      (__struct_thing_isset && ((__struct_thing || other->__struct_thing) && ![__struct_thing isEqual:other->__struct_thing]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__struct_thing release_stub];
  [super dealloc_stub];
}

- (int32_t) errorCode {
  return __errorCode;
}

- (void) setErrorCode: (int32_t) errorCode {
  __errorCode = errorCode;
  __errorCode_isset = YES;
}

- (BOOL) errorCodeIsSet {
  return __errorCode_isset;
}

- (void) unsetErrorCode {
  __errorCode_isset = NO;
}

- (ThriftTestXtruct *) struct_thing {
  return [[__struct_thing retain_stub] autorelease_stub];
}

- (void) setStruct_thing: (ThriftTestXtruct *) struct_thing {
  [struct_thing retain_stub];
  [__struct_thing release_stub];
  __struct_thing = struct_thing;
  __struct_thing_isset = YES;
}

- (BOOL) struct_thingIsSet {
  return __struct_thing_isset;
}

- (void) unsetStruct_thing {
  [__struct_thing release_stub];
  __struct_thing = nil;
  __struct_thing_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setErrorCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          ThriftTestXtruct *fieldValue = [[ThriftTestXtruct alloc] init];
          [fieldValue read: inProtocol];
          [self setStruct_thing: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Xception2"];
  if (__errorCode_isset) {
    [outProtocol writeFieldBeginWithName: @"errorCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __errorCode];
    [outProtocol writeFieldEnd];
  }
  if (__struct_thing_isset) {
    if (__struct_thing != nil) {
      [outProtocol writeFieldBeginWithName: @"struct_thing" type: TType_STRUCT fieldID: 2];
      [__struct_thing write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestXception2("];
  [ms appendString: @"errorCode:"];
  [ms appendFormat: @"%i", __errorCode];
  [ms appendString: @",struct_thing:"];
  [ms appendFormat: @"%@", __struct_thing];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ThriftTestEmptyStruct

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestEmptyStruct class]]) {
    return NO;
  }
  ThriftTestEmptyStruct *other = (ThriftTestEmptyStruct *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"EmptyStruct"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestEmptyStruct("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ThriftTestOneField

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithField: (ThriftTestEmptyStruct *) field
{
  self = [super init];
  __field = [field retain_stub];
  __field_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"field"])
  {
    __field = [[decoder decodeObjectForKey: @"field"] retain_stub];
    __field_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__field_isset)
  {
    [encoder encodeObject: __field forKey: @"field"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __field_isset ? 2654435761 : 0;
  if (__field_isset)
  {
    hash = (hash * 31) ^ [__field hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestOneField class]]) {
    return NO;
  }
  ThriftTestOneField *other = (ThriftTestOneField *)anObject;
  if ((__field_isset != other->__field_isset) ||
      (__field_isset && ((__field || other->__field) && ![__field isEqual:other->__field]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__field release_stub];
  [super dealloc_stub];
}

- (ThriftTestEmptyStruct *) field {
  return [[__field retain_stub] autorelease_stub];
}

- (void) setField: (ThriftTestEmptyStruct *) field {
  [field retain_stub];
  [__field release_stub];
  __field = field;
  __field_isset = YES;
}

- (BOOL) fieldIsSet {
  return __field_isset;
}

- (void) unsetField {
  [__field release_stub];
  __field = nil;
  __field_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ThriftTestEmptyStruct *fieldValue = [[ThriftTestEmptyStruct alloc] init];
          [fieldValue read: inProtocol];
          [self setField: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"OneField"];
  if (__field_isset) {
    if (__field != nil) {
      [outProtocol writeFieldBeginWithName: @"field" type: TType_STRUCT fieldID: 1];
      [__field write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestOneField("];
  [ms appendString: @"field:"];
  [ms appendFormat: @"%@", __field];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ThriftTestVersioningTestV1

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithBegin_in_both: (int32_t) begin_in_both old_string: (NSString *) old_string end_in_both: (int32_t) end_in_both
{
  self = [super init];
  __begin_in_both = begin_in_both;
  __begin_in_both_isset = YES;
  __old_string = [old_string retain_stub];
  __old_string_isset = YES;
  __end_in_both = end_in_both;
  __end_in_both_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"begin_in_both"])
  {
    __begin_in_both = [decoder decodeInt32ForKey: @"begin_in_both"];
    __begin_in_both_isset = YES;
  }
  if ([decoder containsValueForKey: @"old_string"])
  {
    __old_string = [[decoder decodeObjectForKey: @"old_string"] retain_stub];
    __old_string_isset = YES;
  }
  if ([decoder containsValueForKey: @"end_in_both"])
  {
    __end_in_both = [decoder decodeInt32ForKey: @"end_in_both"];
    __end_in_both_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__begin_in_both_isset)
  {
    [encoder encodeInt32: __begin_in_both forKey: @"begin_in_both"];
  }
  if (__old_string_isset)
  {
    [encoder encodeObject: __old_string forKey: @"old_string"];
  }
  if (__end_in_both_isset)
  {
    [encoder encodeInt32: __end_in_both forKey: @"end_in_both"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __begin_in_both_isset ? 2654435761 : 0;
  if (__begin_in_both_isset)
  {
    hash = (hash * 31) ^ [@(__begin_in_both) hash];
  }
  hash = (hash * 31) ^ __old_string_isset ? 2654435761 : 0;
  if (__old_string_isset)
  {
    hash = (hash * 31) ^ [__old_string hash];
  }
  hash = (hash * 31) ^ __end_in_both_isset ? 2654435761 : 0;
  if (__end_in_both_isset)
  {
    hash = (hash * 31) ^ [@(__end_in_both) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestVersioningTestV1 class]]) {
    return NO;
  }
  ThriftTestVersioningTestV1 *other = (ThriftTestVersioningTestV1 *)anObject;
  if ((__begin_in_both_isset != other->__begin_in_both_isset) ||
      (__begin_in_both_isset && (__begin_in_both != other->__begin_in_both))) {
    return NO;
  }
  if ((__old_string_isset != other->__old_string_isset) ||
      (__old_string_isset && ((__old_string || other->__old_string) && ![__old_string isEqual:other->__old_string]))) {
    return NO;
  }
  if ((__end_in_both_isset != other->__end_in_both_isset) ||
      (__end_in_both_isset && (__end_in_both != other->__end_in_both))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__old_string release_stub];
  [super dealloc_stub];
}

- (int32_t) begin_in_both {
  return __begin_in_both;
}

- (void) setBegin_in_both: (int32_t) begin_in_both {
  __begin_in_both = begin_in_both;
  __begin_in_both_isset = YES;
}

- (BOOL) begin_in_bothIsSet {
  return __begin_in_both_isset;
}

- (void) unsetBegin_in_both {
  __begin_in_both_isset = NO;
}

- (NSString *) old_string {
  return [[__old_string retain_stub] autorelease_stub];
}

- (void) setOld_string: (NSString *) old_string {
  [old_string retain_stub];
  [__old_string release_stub];
  __old_string = old_string;
  __old_string_isset = YES;
}

- (BOOL) old_stringIsSet {
  return __old_string_isset;
}

- (void) unsetOld_string {
  [__old_string release_stub];
  __old_string = nil;
  __old_string_isset = NO;
}

- (int32_t) end_in_both {
  return __end_in_both;
}

- (void) setEnd_in_both: (int32_t) end_in_both {
  __end_in_both = end_in_both;
  __end_in_both_isset = YES;
}

- (BOOL) end_in_bothIsSet {
  return __end_in_both_isset;
}

- (void) unsetEnd_in_both {
  __end_in_both_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setBegin_in_both: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOld_string: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setEnd_in_both: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"VersioningTestV1"];
  if (__begin_in_both_isset) {
    [outProtocol writeFieldBeginWithName: @"begin_in_both" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __begin_in_both];
    [outProtocol writeFieldEnd];
  }
  if (__old_string_isset) {
    if (__old_string != nil) {
      [outProtocol writeFieldBeginWithName: @"old_string" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __old_string];
      [outProtocol writeFieldEnd];
    }
  }
  if (__end_in_both_isset) {
    [outProtocol writeFieldBeginWithName: @"end_in_both" type: TType_I32 fieldID: 12];
    [outProtocol writeI32: __end_in_both];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestVersioningTestV1("];
  [ms appendString: @"begin_in_both:"];
  [ms appendFormat: @"%i", __begin_in_both];
  [ms appendString: @",old_string:"];
  [ms appendFormat: @"\"%@\"", __old_string];
  [ms appendString: @",end_in_both:"];
  [ms appendFormat: @"%i", __end_in_both];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ThriftTestVersioningTestV2

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithBegin_in_both: (int32_t) begin_in_both newint: (int32_t) newint newbyte: (uint8_t) newbyte newshort: (int16_t) newshort newlong: (int64_t) newlong newdouble: (double) newdouble newstruct: (ThriftTestBonk *) newstruct newlist: (NSMutableArray *) newlist newset: (NSMutableSet *) newset newmap: (NSMutableDictionary *) newmap newstring: (NSString *) newstring end_in_both: (int32_t) end_in_both
{
  self = [super init];
  __begin_in_both = begin_in_both;
  __begin_in_both_isset = YES;
  __newint = newint;
  __newint_isset = YES;
  __newbyte = newbyte;
  __newbyte_isset = YES;
  __newshort = newshort;
  __newshort_isset = YES;
  __newlong = newlong;
  __newlong_isset = YES;
  __newdouble = newdouble;
  __newdouble_isset = YES;
  __newstruct = [newstruct retain_stub];
  __newstruct_isset = YES;
  __newlist = [newlist retain_stub];
  __newlist_isset = YES;
  __newset = [newset retain_stub];
  __newset_isset = YES;
  __newmap = [newmap retain_stub];
  __newmap_isset = YES;
  __newstring = [newstring retain_stub];
  __newstring_isset = YES;
  __end_in_both = end_in_both;
  __end_in_both_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"begin_in_both"])
  {
    __begin_in_both = [decoder decodeInt32ForKey: @"begin_in_both"];
    __begin_in_both_isset = YES;
  }
  if ([decoder containsValueForKey: @"newint"])
  {
    __newint = [decoder decodeInt32ForKey: @"newint"];
    __newint_isset = YES;
  }
  if ([decoder containsValueForKey: @"newbyte"])
  {
    __newbyte = [decoder decodeIntForKey: @"newbyte"];
    __newbyte_isset = YES;
  }
  if ([decoder containsValueForKey: @"newshort"])
  {
    __newshort = [decoder decodeIntForKey: @"newshort"];
    __newshort_isset = YES;
  }
  if ([decoder containsValueForKey: @"newlong"])
  {
    __newlong = [decoder decodeInt64ForKey: @"newlong"];
    __newlong_isset = YES;
  }
  if ([decoder containsValueForKey: @"newdouble"])
  {
    __newdouble = [decoder decodeDoubleForKey: @"newdouble"];
    __newdouble_isset = YES;
  }
  if ([decoder containsValueForKey: @"newstruct"])
  {
    __newstruct = [[decoder decodeObjectForKey: @"newstruct"] retain_stub];
    __newstruct_isset = YES;
  }
  if ([decoder containsValueForKey: @"newlist"])
  {
    __newlist = [[decoder decodeObjectForKey: @"newlist"] retain_stub];
    __newlist_isset = YES;
  }
  if ([decoder containsValueForKey: @"newset"])
  {
    __newset = [[decoder decodeObjectForKey: @"newset"] retain_stub];
    __newset_isset = YES;
  }
  if ([decoder containsValueForKey: @"newmap"])
  {
    __newmap = [[decoder decodeObjectForKey: @"newmap"] retain_stub];
    __newmap_isset = YES;
  }
  if ([decoder containsValueForKey: @"newstring"])
  {
    __newstring = [[decoder decodeObjectForKey: @"newstring"] retain_stub];
    __newstring_isset = YES;
  }
  if ([decoder containsValueForKey: @"end_in_both"])
  {
    __end_in_both = [decoder decodeInt32ForKey: @"end_in_both"];
    __end_in_both_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__begin_in_both_isset)
  {
    [encoder encodeInt32: __begin_in_both forKey: @"begin_in_both"];
  }
  if (__newint_isset)
  {
    [encoder encodeInt32: __newint forKey: @"newint"];
  }
  if (__newbyte_isset)
  {
    [encoder encodeInt: __newbyte forKey: @"newbyte"];
  }
  if (__newshort_isset)
  {
    [encoder encodeInt: __newshort forKey: @"newshort"];
  }
  if (__newlong_isset)
  {
    [encoder encodeInt64: __newlong forKey: @"newlong"];
  }
  if (__newdouble_isset)
  {
    [encoder encodeDouble: __newdouble forKey: @"newdouble"];
  }
  if (__newstruct_isset)
  {
    [encoder encodeObject: __newstruct forKey: @"newstruct"];
  }
  if (__newlist_isset)
  {
    [encoder encodeObject: __newlist forKey: @"newlist"];
  }
  if (__newset_isset)
  {
    [encoder encodeObject: __newset forKey: @"newset"];
  }
  if (__newmap_isset)
  {
    [encoder encodeObject: __newmap forKey: @"newmap"];
  }
  if (__newstring_isset)
  {
    [encoder encodeObject: __newstring forKey: @"newstring"];
  }
  if (__end_in_both_isset)
  {
    [encoder encodeInt32: __end_in_both forKey: @"end_in_both"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __begin_in_both_isset ? 2654435761 : 0;
  if (__begin_in_both_isset)
  {
    hash = (hash * 31) ^ [@(__begin_in_both) hash];
  }
  hash = (hash * 31) ^ __newint_isset ? 2654435761 : 0;
  if (__newint_isset)
  {
    hash = (hash * 31) ^ [@(__newint) hash];
  }
  hash = (hash * 31) ^ __newbyte_isset ? 2654435761 : 0;
  if (__newbyte_isset)
  {
    hash = (hash * 31) ^ [@(__newbyte) hash];
  }
  hash = (hash * 31) ^ __newshort_isset ? 2654435761 : 0;
  if (__newshort_isset)
  {
    hash = (hash * 31) ^ [@(__newshort) hash];
  }
  hash = (hash * 31) ^ __newlong_isset ? 2654435761 : 0;
  if (__newlong_isset)
  {
    hash = (hash * 31) ^ [@(__newlong) hash];
  }
  hash = (hash * 31) ^ __newdouble_isset ? 2654435761 : 0;
  if (__newdouble_isset)
  {
    hash = (hash * 31) ^ [@(__newdouble) hash];
  }
  hash = (hash * 31) ^ __newstruct_isset ? 2654435761 : 0;
  if (__newstruct_isset)
  {
    hash = (hash * 31) ^ [__newstruct hash];
  }
  hash = (hash * 31) ^ __newlist_isset ? 2654435761 : 0;
  if (__newlist_isset)
  {
    hash = (hash * 31) ^ [__newlist hash];
  }
  hash = (hash * 31) ^ __newset_isset ? 2654435761 : 0;
  if (__newset_isset)
  {
    hash = (hash * 31) ^ [__newset hash];
  }
  hash = (hash * 31) ^ __newmap_isset ? 2654435761 : 0;
  if (__newmap_isset)
  {
    hash = (hash * 31) ^ [__newmap hash];
  }
  hash = (hash * 31) ^ __newstring_isset ? 2654435761 : 0;
  if (__newstring_isset)
  {
    hash = (hash * 31) ^ [__newstring hash];
  }
  hash = (hash * 31) ^ __end_in_both_isset ? 2654435761 : 0;
  if (__end_in_both_isset)
  {
    hash = (hash * 31) ^ [@(__end_in_both) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestVersioningTestV2 class]]) {
    return NO;
  }
  ThriftTestVersioningTestV2 *other = (ThriftTestVersioningTestV2 *)anObject;
  if ((__begin_in_both_isset != other->__begin_in_both_isset) ||
      (__begin_in_both_isset && (__begin_in_both != other->__begin_in_both))) {
    return NO;
  }
  if ((__newint_isset != other->__newint_isset) ||
      (__newint_isset && (__newint != other->__newint))) {
    return NO;
  }
  if ((__newbyte_isset != other->__newbyte_isset) ||
      (__newbyte_isset && (__newbyte != other->__newbyte))) {
    return NO;
  }
  if ((__newshort_isset != other->__newshort_isset) ||
      (__newshort_isset && (__newshort != other->__newshort))) {
    return NO;
  }
  if ((__newlong_isset != other->__newlong_isset) ||
      (__newlong_isset && (__newlong != other->__newlong))) {
    return NO;
  }
  if ((__newdouble_isset != other->__newdouble_isset) ||
      (__newdouble_isset && (__newdouble != other->__newdouble))) {
    return NO;
  }
  if ((__newstruct_isset != other->__newstruct_isset) ||
      (__newstruct_isset && ((__newstruct || other->__newstruct) && ![__newstruct isEqual:other->__newstruct]))) {
    return NO;
  }
  if ((__newlist_isset != other->__newlist_isset) ||
      (__newlist_isset && ((__newlist || other->__newlist) && ![__newlist isEqual:other->__newlist]))) {
    return NO;
  }
  if ((__newset_isset != other->__newset_isset) ||
      (__newset_isset && ((__newset || other->__newset) && ![__newset isEqual:other->__newset]))) {
    return NO;
  }
  if ((__newmap_isset != other->__newmap_isset) ||
      (__newmap_isset && ((__newmap || other->__newmap) && ![__newmap isEqual:other->__newmap]))) {
    return NO;
  }
  if ((__newstring_isset != other->__newstring_isset) ||
      (__newstring_isset && ((__newstring || other->__newstring) && ![__newstring isEqual:other->__newstring]))) {
    return NO;
  }
  if ((__end_in_both_isset != other->__end_in_both_isset) ||
      (__end_in_both_isset && (__end_in_both != other->__end_in_both))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__newstruct release_stub];
  [__newlist release_stub];
  [__newset release_stub];
  [__newmap release_stub];
  [__newstring release_stub];
  [super dealloc_stub];
}

- (int32_t) begin_in_both {
  return __begin_in_both;
}

- (void) setBegin_in_both: (int32_t) begin_in_both {
  __begin_in_both = begin_in_both;
  __begin_in_both_isset = YES;
}

- (BOOL) begin_in_bothIsSet {
  return __begin_in_both_isset;
}

- (void) unsetBegin_in_both {
  __begin_in_both_isset = NO;
}

- (int32_t) newint {
  return __newint;
}

- (void) setNewint: (int32_t) newint {
  __newint = newint;
  __newint_isset = YES;
}

- (BOOL) newintIsSet {
  return __newint_isset;
}

- (void) unsetNewint {
  __newint_isset = NO;
}

- (uint8_t) newbyte {
  return __newbyte;
}

- (void) setNewbyte: (uint8_t) newbyte {
  __newbyte = newbyte;
  __newbyte_isset = YES;
}

- (BOOL) newbyteIsSet {
  return __newbyte_isset;
}

- (void) unsetNewbyte {
  __newbyte_isset = NO;
}

- (int16_t) newshort {
  return __newshort;
}

- (void) setNewshort: (int16_t) newshort {
  __newshort = newshort;
  __newshort_isset = YES;
}

- (BOOL) newshortIsSet {
  return __newshort_isset;
}

- (void) unsetNewshort {
  __newshort_isset = NO;
}

- (int64_t) newlong {
  return __newlong;
}

- (void) setNewlong: (int64_t) newlong {
  __newlong = newlong;
  __newlong_isset = YES;
}

- (BOOL) newlongIsSet {
  return __newlong_isset;
}

- (void) unsetNewlong {
  __newlong_isset = NO;
}

- (double) newdouble {
  return __newdouble;
}

- (void) setNewdouble: (double) newdouble {
  __newdouble = newdouble;
  __newdouble_isset = YES;
}

- (BOOL) newdoubleIsSet {
  return __newdouble_isset;
}

- (void) unsetNewdouble {
  __newdouble_isset = NO;
}

- (ThriftTestBonk *) newstruct {
  return [[__newstruct retain_stub] autorelease_stub];
}

- (void) setNewstruct: (ThriftTestBonk *) newstruct {
  [newstruct retain_stub];
  [__newstruct release_stub];
  __newstruct = newstruct;
  __newstruct_isset = YES;
}

- (BOOL) newstructIsSet {
  return __newstruct_isset;
}

- (void) unsetNewstruct {
  [__newstruct release_stub];
  __newstruct = nil;
  __newstruct_isset = NO;
}

- (NSMutableArray *) newlist {
  return [[__newlist retain_stub] autorelease_stub];
}

- (void) setNewlist: (NSMutableArray *) newlist {
  [newlist retain_stub];
  [__newlist release_stub];
  __newlist = newlist;
  __newlist_isset = YES;
}

- (BOOL) newlistIsSet {
  return __newlist_isset;
}

- (void) unsetNewlist {
  [__newlist release_stub];
  __newlist = nil;
  __newlist_isset = NO;
}

- (NSMutableSet *) newset {
  return [[__newset retain_stub] autorelease_stub];
}

- (void) setNewset: (NSMutableSet *) newset {
  [newset retain_stub];
  [__newset release_stub];
  __newset = newset;
  __newset_isset = YES;
}

- (BOOL) newsetIsSet {
  return __newset_isset;
}

- (void) unsetNewset {
  [__newset release_stub];
  __newset = nil;
  __newset_isset = NO;
}

- (NSMutableDictionary *) newmap {
  return [[__newmap retain_stub] autorelease_stub];
}

- (void) setNewmap: (NSMutableDictionary *) newmap {
  [newmap retain_stub];
  [__newmap release_stub];
  __newmap = newmap;
  __newmap_isset = YES;
}

- (BOOL) newmapIsSet {
  return __newmap_isset;
}

- (void) unsetNewmap {
  [__newmap release_stub];
  __newmap = nil;
  __newmap_isset = NO;
}

- (NSString *) newstring {
  return [[__newstring retain_stub] autorelease_stub];
}

- (void) setNewstring: (NSString *) newstring {
  [newstring retain_stub];
  [__newstring release_stub];
  __newstring = newstring;
  __newstring_isset = YES;
}

- (BOOL) newstringIsSet {
  return __newstring_isset;
}

- (void) unsetNewstring {
  [__newstring release_stub];
  __newstring = nil;
  __newstring_isset = NO;
}

- (int32_t) end_in_both {
  return __end_in_both;
}

- (void) setEnd_in_both: (int32_t) end_in_both {
  __end_in_both = end_in_both;
  __end_in_both_isset = YES;
}

- (BOOL) end_in_bothIsSet {
  return __end_in_both_isset;
}

- (void) unsetEnd_in_both {
  __end_in_both_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setBegin_in_both: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setNewint: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setNewbyte: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I16) {
          int16_t fieldValue = [inProtocol readI16];
          [self setNewshort: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setNewlong: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setNewdouble: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRUCT) {
          ThriftTestBonk *fieldValue = [[ThriftTestBonk alloc] init];
          [fieldValue read: inProtocol];
          [self setNewstruct: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_LIST) {
          int _size54;
          [inProtocol readListBeginReturningElementType: NULL size: &_size54];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size54];
          int _i55;
          for (_i55 = 0; _i55 < _size54; ++_i55)
          {
            int32_t _elem56 = [inProtocol readI32];
            [fieldValue addObject: [NSNumber numberWithLong: _elem56]];
          }
          [inProtocol readListEnd];
          [self setNewlist: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_SET) {
          int _size57;
          [inProtocol readSetBeginReturningElementType: NULL size: &_size57];
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size57];
          int _i58;
          for (_i58 = 0; _i58 < _size57; ++_i58)
          {
            int32_t _elem59 = [inProtocol readI32];
            [fieldValue addObject: [NSNumber numberWithLong: _elem59]];
          }
          [inProtocol readSetEnd];
          [self setNewset: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_MAP) {
          int _size60;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size60];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size60];
          int _i61;
          for (_i61 = 0; _i61 < _size60; ++_i61)
          {
            int32_t _key62 = [inProtocol readI32];
            int32_t _val63 = [inProtocol readI32];
            [fieldValue setObject: [NSNumber numberWithLong: _val63] forKey: [NSNumber numberWithLong: _key62]];
          }
          [inProtocol readMapEnd];
          [self setNewmap: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNewstring: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setEnd_in_both: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"VersioningTestV2"];
  if (__begin_in_both_isset) {
    [outProtocol writeFieldBeginWithName: @"begin_in_both" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __begin_in_both];
    [outProtocol writeFieldEnd];
  }
  if (__newint_isset) {
    [outProtocol writeFieldBeginWithName: @"newint" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __newint];
    [outProtocol writeFieldEnd];
  }
  if (__newbyte_isset) {
    [outProtocol writeFieldBeginWithName: @"newbyte" type: TType_BYTE fieldID: 3];
    [outProtocol writeByte: __newbyte];
    [outProtocol writeFieldEnd];
  }
  if (__newshort_isset) {
    [outProtocol writeFieldBeginWithName: @"newshort" type: TType_I16 fieldID: 4];
    [outProtocol writeI16: __newshort];
    [outProtocol writeFieldEnd];
  }
  if (__newlong_isset) {
    [outProtocol writeFieldBeginWithName: @"newlong" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __newlong];
    [outProtocol writeFieldEnd];
  }
  if (__newdouble_isset) {
    [outProtocol writeFieldBeginWithName: @"newdouble" type: TType_DOUBLE fieldID: 6];
    [outProtocol writeDouble: __newdouble];
    [outProtocol writeFieldEnd];
  }
  if (__newstruct_isset) {
    if (__newstruct != nil) {
      [outProtocol writeFieldBeginWithName: @"newstruct" type: TType_STRUCT fieldID: 7];
      [__newstruct write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__newlist_isset) {
    if (__newlist != nil) {
      [outProtocol writeFieldBeginWithName: @"newlist" type: TType_LIST fieldID: 8];
      {
        [outProtocol writeListBeginWithElementType: TType_I32 size: [__newlist count]];
        int idx65;
        for (idx65 = 0; idx65 < [__newlist count]; idx65++)
        {
          [outProtocol writeI32: [[__newlist objectAtIndex: idx65] longValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__newset_isset) {
    if (__newset != nil) {
      [outProtocol writeFieldBeginWithName: @"newset" type: TType_SET fieldID: 9];
      {
        [outProtocol writeSetBeginWithElementType: TType_I32 size: [__newset count]];
        NSEnumerator * _iter66 = [__newset objectEnumerator];
        id obj67;
        while ((obj67 = [_iter66 nextObject]))
        {
          [outProtocol writeI32: [obj67 longValue]];
        }
        [outProtocol writeSetEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__newmap_isset) {
    if (__newmap != nil) {
      [outProtocol writeFieldBeginWithName: @"newmap" type: TType_MAP fieldID: 10];
      {
        [outProtocol writeMapBeginWithKeyType: TType_I32 valueType: TType_I32 size: [__newmap count]];
        NSEnumerator * _iter68 = [__newmap keyEnumerator];
        id key69;
        while ((key69 = [_iter68 nextObject]))
        {
          [outProtocol writeI32: [key69 longValue]];
          [outProtocol writeI32: [[__newmap objectForKey: key69] longValue]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__newstring_isset) {
    if (__newstring != nil) {
      [outProtocol writeFieldBeginWithName: @"newstring" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __newstring];
      [outProtocol writeFieldEnd];
    }
  }
  if (__end_in_both_isset) {
    [outProtocol writeFieldBeginWithName: @"end_in_both" type: TType_I32 fieldID: 12];
    [outProtocol writeI32: __end_in_both];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestVersioningTestV2("];
  [ms appendString: @"begin_in_both:"];
  [ms appendFormat: @"%i", __begin_in_both];
  [ms appendString: @",newint:"];
  [ms appendFormat: @"%i", __newint];
  [ms appendString: @",newbyte:"];
  [ms appendFormat: @"%i", __newbyte];
  [ms appendString: @",newshort:"];
  [ms appendFormat: @"%hi", __newshort];
  [ms appendString: @",newlong:"];
  [ms appendFormat: @"%qi", __newlong];
  [ms appendString: @",newdouble:"];
  [ms appendFormat: @"%f", __newdouble];
  [ms appendString: @",newstruct:"];
  [ms appendFormat: @"%@", __newstruct];
  [ms appendString: @",newlist:"];
  [ms appendFormat: @"%@", __newlist];
  [ms appendString: @",newset:"];
  [ms appendFormat: @"%@", __newset];
  [ms appendString: @",newmap:"];
  [ms appendFormat: @"%@", __newmap];
  [ms appendString: @",newstring:"];
  [ms appendFormat: @"\"%@\"", __newstring];
  [ms appendString: @",end_in_both:"];
  [ms appendFormat: @"%i", __end_in_both];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ThriftTestListTypeVersioningV1

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMyints: (NSMutableArray *) myints hello: (NSString *) hello
{
  self = [super init];
  __myints = [myints retain_stub];
  __myints_isset = YES;
  __hello = [hello retain_stub];
  __hello_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"myints"])
  {
    __myints = [[decoder decodeObjectForKey: @"myints"] retain_stub];
    __myints_isset = YES;
  }
  if ([decoder containsValueForKey: @"hello"])
  {
    __hello = [[decoder decodeObjectForKey: @"hello"] retain_stub];
    __hello_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__myints_isset)
  {
    [encoder encodeObject: __myints forKey: @"myints"];
  }
  if (__hello_isset)
  {
    [encoder encodeObject: __hello forKey: @"hello"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __myints_isset ? 2654435761 : 0;
  if (__myints_isset)
  {
    hash = (hash * 31) ^ [__myints hash];
  }
  hash = (hash * 31) ^ __hello_isset ? 2654435761 : 0;
  if (__hello_isset)
  {
    hash = (hash * 31) ^ [__hello hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestListTypeVersioningV1 class]]) {
    return NO;
  }
  ThriftTestListTypeVersioningV1 *other = (ThriftTestListTypeVersioningV1 *)anObject;
  if ((__myints_isset != other->__myints_isset) ||
      (__myints_isset && ((__myints || other->__myints) && ![__myints isEqual:other->__myints]))) {
    return NO;
  }
  if ((__hello_isset != other->__hello_isset) ||
      (__hello_isset && ((__hello || other->__hello) && ![__hello isEqual:other->__hello]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__myints release_stub];
  [__hello release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) myints {
  return [[__myints retain_stub] autorelease_stub];
}

- (void) setMyints: (NSMutableArray *) myints {
  [myints retain_stub];
  [__myints release_stub];
  __myints = myints;
  __myints_isset = YES;
}

- (BOOL) myintsIsSet {
  return __myints_isset;
}

- (void) unsetMyints {
  [__myints release_stub];
  __myints = nil;
  __myints_isset = NO;
}

- (NSString *) hello {
  return [[__hello retain_stub] autorelease_stub];
}

- (void) setHello: (NSString *) hello {
  [hello retain_stub];
  [__hello release_stub];
  __hello = hello;
  __hello_isset = YES;
}

- (BOOL) helloIsSet {
  return __hello_isset;
}

- (void) unsetHello {
  [__hello release_stub];
  __hello = nil;
  __hello_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size70;
          [inProtocol readListBeginReturningElementType: NULL size: &_size70];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size70];
          int _i71;
          for (_i71 = 0; _i71 < _size70; ++_i71)
          {
            int32_t _elem72 = [inProtocol readI32];
            [fieldValue addObject: [NSNumber numberWithLong: _elem72]];
          }
          [inProtocol readListEnd];
          [self setMyints: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHello: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ListTypeVersioningV1"];
  if (__myints_isset) {
    if (__myints != nil) {
      [outProtocol writeFieldBeginWithName: @"myints" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_I32 size: [__myints count]];
        int idx74;
        for (idx74 = 0; idx74 < [__myints count]; idx74++)
        {
          [outProtocol writeI32: [[__myints objectAtIndex: idx74] longValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__hello_isset) {
    if (__hello != nil) {
      [outProtocol writeFieldBeginWithName: @"hello" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __hello];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestListTypeVersioningV1("];
  [ms appendString: @"myints:"];
  [ms appendFormat: @"%@", __myints];
  [ms appendString: @",hello:"];
  [ms appendFormat: @"\"%@\"", __hello];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ThriftTestListTypeVersioningV2

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithStrings: (NSMutableArray *) strings hello: (NSString *) hello
{
  self = [super init];
  __strings = [strings retain_stub];
  __strings_isset = YES;
  __hello = [hello retain_stub];
  __hello_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"strings"])
  {
    __strings = [[decoder decodeObjectForKey: @"strings"] retain_stub];
    __strings_isset = YES;
  }
  if ([decoder containsValueForKey: @"hello"])
  {
    __hello = [[decoder decodeObjectForKey: @"hello"] retain_stub];
    __hello_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__strings_isset)
  {
    [encoder encodeObject: __strings forKey: @"strings"];
  }
  if (__hello_isset)
  {
    [encoder encodeObject: __hello forKey: @"hello"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __strings_isset ? 2654435761 : 0;
  if (__strings_isset)
  {
    hash = (hash * 31) ^ [__strings hash];
  }
  hash = (hash * 31) ^ __hello_isset ? 2654435761 : 0;
  if (__hello_isset)
  {
    hash = (hash * 31) ^ [__hello hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestListTypeVersioningV2 class]]) {
    return NO;
  }
  ThriftTestListTypeVersioningV2 *other = (ThriftTestListTypeVersioningV2 *)anObject;
  if ((__strings_isset != other->__strings_isset) ||
      (__strings_isset && ((__strings || other->__strings) && ![__strings isEqual:other->__strings]))) {
    return NO;
  }
  if ((__hello_isset != other->__hello_isset) ||
      (__hello_isset && ((__hello || other->__hello) && ![__hello isEqual:other->__hello]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__strings release_stub];
  [__hello release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) strings {
  return [[__strings retain_stub] autorelease_stub];
}

- (void) setStrings: (NSMutableArray *) strings {
  [strings retain_stub];
  [__strings release_stub];
  __strings = strings;
  __strings_isset = YES;
}

- (BOOL) stringsIsSet {
  return __strings_isset;
}

- (void) unsetStrings {
  [__strings release_stub];
  __strings = nil;
  __strings_isset = NO;
}

- (NSString *) hello {
  return [[__hello retain_stub] autorelease_stub];
}

- (void) setHello: (NSString *) hello {
  [hello retain_stub];
  [__hello release_stub];
  __hello = hello;
  __hello_isset = YES;
}

- (BOOL) helloIsSet {
  return __hello_isset;
}

- (void) unsetHello {
  [__hello release_stub];
  __hello = nil;
  __hello_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size75;
          [inProtocol readListBeginReturningElementType: NULL size: &_size75];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size75];
          int _i76;
          for (_i76 = 0; _i76 < _size75; ++_i76)
          {
            NSString * _elem77 = [inProtocol readString];
            [fieldValue addObject: _elem77];
          }
          [inProtocol readListEnd];
          [self setStrings: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHello: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ListTypeVersioningV2"];
  if (__strings_isset) {
    if (__strings != nil) {
      [outProtocol writeFieldBeginWithName: @"strings" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__strings count]];
        int idx79;
        for (idx79 = 0; idx79 < [__strings count]; idx79++)
        {
          [outProtocol writeString: [__strings objectAtIndex: idx79]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__hello_isset) {
    if (__hello != nil) {
      [outProtocol writeFieldBeginWithName: @"hello" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __hello];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestListTypeVersioningV2("];
  [ms appendString: @"strings:"];
  [ms appendFormat: @"%@", __strings];
  [ms appendString: @",hello:"];
  [ms appendFormat: @"\"%@\"", __hello];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ThriftTestGuessProtocolStruct

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMap_field: (NSMutableDictionary *) map_field
{
  self = [super init];
  __map_field = [map_field retain_stub];
  __map_field_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"map_field"])
  {
    __map_field = [[decoder decodeObjectForKey: @"map_field"] retain_stub];
    __map_field_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__map_field_isset)
  {
    [encoder encodeObject: __map_field forKey: @"map_field"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __map_field_isset ? 2654435761 : 0;
  if (__map_field_isset)
  {
    hash = (hash * 31) ^ [__map_field hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestGuessProtocolStruct class]]) {
    return NO;
  }
  ThriftTestGuessProtocolStruct *other = (ThriftTestGuessProtocolStruct *)anObject;
  if ((__map_field_isset != other->__map_field_isset) ||
      (__map_field_isset && ((__map_field || other->__map_field) && ![__map_field isEqual:other->__map_field]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__map_field release_stub];
  [super dealloc_stub];
}

- (NSMutableDictionary *) map_field {
  return [[__map_field retain_stub] autorelease_stub];
}

- (void) setMap_field: (NSMutableDictionary *) map_field {
  [map_field retain_stub];
  [__map_field release_stub];
  __map_field = map_field;
  __map_field_isset = YES;
}

- (BOOL) map_fieldIsSet {
  return __map_field_isset;
}

- (void) unsetMap_field {
  [__map_field release_stub];
  __map_field = nil;
  __map_field_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 7:
        if (fieldType == TType_MAP) {
          int _size80;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size80];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size80];
          int _i81;
          for (_i81 = 0; _i81 < _size80; ++_i81)
          {
            NSString * _key82 = [inProtocol readString];
            NSString * _val83 = [inProtocol readString];
            [fieldValue setObject: _val83 forKey: _key82];
          }
          [inProtocol readMapEnd];
          [self setMap_field: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GuessProtocolStruct"];
  if (__map_field_isset) {
    if (__map_field != nil) {
      [outProtocol writeFieldBeginWithName: @"map_field" type: TType_MAP fieldID: 7];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__map_field count]];
        NSEnumerator * _iter84 = [__map_field keyEnumerator];
        id key85;
        while ((key85 = [_iter84 nextObject]))
        {
          [outProtocol writeString: key85];
          [outProtocol writeString: [__map_field objectForKey: key85]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestGuessProtocolStruct("];
  [ms appendString: @"map_field:"];
  [ms appendFormat: @"%@", __map_field];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ThriftTestLargeDeltas

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithB1: (ThriftTestBools *) b1 b10: (ThriftTestBools *) b10 b100: (ThriftTestBools *) b100 check_true: (BOOL) check_true b1000: (ThriftTestBools *) b1000 check_false: (BOOL) check_false vertwo2000: (ThriftTestVersioningTestV2 *) vertwo2000 a_set2500: (NSMutableSet *) a_set2500 vertwo3000: (ThriftTestVersioningTestV2 *) vertwo3000 big_numbers: (NSMutableArray *) big_numbers
{
  self = [super init];
  __b1 = [b1 retain_stub];
  __b1_isset = YES;
  __b10 = [b10 retain_stub];
  __b10_isset = YES;
  __b100 = [b100 retain_stub];
  __b100_isset = YES;
  __check_true = check_true;
  __check_true_isset = YES;
  __b1000 = [b1000 retain_stub];
  __b1000_isset = YES;
  __check_false = check_false;
  __check_false_isset = YES;
  __vertwo2000 = [vertwo2000 retain_stub];
  __vertwo2000_isset = YES;
  __a_set2500 = [a_set2500 retain_stub];
  __a_set2500_isset = YES;
  __vertwo3000 = [vertwo3000 retain_stub];
  __vertwo3000_isset = YES;
  __big_numbers = [big_numbers retain_stub];
  __big_numbers_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"b1"])
  {
    __b1 = [[decoder decodeObjectForKey: @"b1"] retain_stub];
    __b1_isset = YES;
  }
  if ([decoder containsValueForKey: @"b10"])
  {
    __b10 = [[decoder decodeObjectForKey: @"b10"] retain_stub];
    __b10_isset = YES;
  }
  if ([decoder containsValueForKey: @"b100"])
  {
    __b100 = [[decoder decodeObjectForKey: @"b100"] retain_stub];
    __b100_isset = YES;
  }
  if ([decoder containsValueForKey: @"check_true"])
  {
    __check_true = [decoder decodeBoolForKey: @"check_true"];
    __check_true_isset = YES;
  }
  if ([decoder containsValueForKey: @"b1000"])
  {
    __b1000 = [[decoder decodeObjectForKey: @"b1000"] retain_stub];
    __b1000_isset = YES;
  }
  if ([decoder containsValueForKey: @"check_false"])
  {
    __check_false = [decoder decodeBoolForKey: @"check_false"];
    __check_false_isset = YES;
  }
  if ([decoder containsValueForKey: @"vertwo2000"])
  {
    __vertwo2000 = [[decoder decodeObjectForKey: @"vertwo2000"] retain_stub];
    __vertwo2000_isset = YES;
  }
  if ([decoder containsValueForKey: @"a_set2500"])
  {
    __a_set2500 = [[decoder decodeObjectForKey: @"a_set2500"] retain_stub];
    __a_set2500_isset = YES;
  }
  if ([decoder containsValueForKey: @"vertwo3000"])
  {
    __vertwo3000 = [[decoder decodeObjectForKey: @"vertwo3000"] retain_stub];
    __vertwo3000_isset = YES;
  }
  if ([decoder containsValueForKey: @"big_numbers"])
  {
    __big_numbers = [[decoder decodeObjectForKey: @"big_numbers"] retain_stub];
    __big_numbers_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__b1_isset)
  {
    [encoder encodeObject: __b1 forKey: @"b1"];
  }
  if (__b10_isset)
  {
    [encoder encodeObject: __b10 forKey: @"b10"];
  }
  if (__b100_isset)
  {
    [encoder encodeObject: __b100 forKey: @"b100"];
  }
  if (__check_true_isset)
  {
    [encoder encodeBool: __check_true forKey: @"check_true"];
  }
  if (__b1000_isset)
  {
    [encoder encodeObject: __b1000 forKey: @"b1000"];
  }
  if (__check_false_isset)
  {
    [encoder encodeBool: __check_false forKey: @"check_false"];
  }
  if (__vertwo2000_isset)
  {
    [encoder encodeObject: __vertwo2000 forKey: @"vertwo2000"];
  }
  if (__a_set2500_isset)
  {
    [encoder encodeObject: __a_set2500 forKey: @"a_set2500"];
  }
  if (__vertwo3000_isset)
  {
    [encoder encodeObject: __vertwo3000 forKey: @"vertwo3000"];
  }
  if (__big_numbers_isset)
  {
    [encoder encodeObject: __big_numbers forKey: @"big_numbers"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __b1_isset ? 2654435761 : 0;
  if (__b1_isset)
  {
    hash = (hash * 31) ^ [__b1 hash];
  }
  hash = (hash * 31) ^ __b10_isset ? 2654435761 : 0;
  if (__b10_isset)
  {
    hash = (hash * 31) ^ [__b10 hash];
  }
  hash = (hash * 31) ^ __b100_isset ? 2654435761 : 0;
  if (__b100_isset)
  {
    hash = (hash * 31) ^ [__b100 hash];
  }
  hash = (hash * 31) ^ __check_true_isset ? 2654435761 : 0;
  if (__check_true_isset)
  {
    hash = (hash * 31) ^ [@(__check_true) hash];
  }
  hash = (hash * 31) ^ __b1000_isset ? 2654435761 : 0;
  if (__b1000_isset)
  {
    hash = (hash * 31) ^ [__b1000 hash];
  }
  hash = (hash * 31) ^ __check_false_isset ? 2654435761 : 0;
  if (__check_false_isset)
  {
    hash = (hash * 31) ^ [@(__check_false) hash];
  }
  hash = (hash * 31) ^ __vertwo2000_isset ? 2654435761 : 0;
  if (__vertwo2000_isset)
  {
    hash = (hash * 31) ^ [__vertwo2000 hash];
  }
  hash = (hash * 31) ^ __a_set2500_isset ? 2654435761 : 0;
  if (__a_set2500_isset)
  {
    hash = (hash * 31) ^ [__a_set2500 hash];
  }
  hash = (hash * 31) ^ __vertwo3000_isset ? 2654435761 : 0;
  if (__vertwo3000_isset)
  {
    hash = (hash * 31) ^ [__vertwo3000 hash];
  }
  hash = (hash * 31) ^ __big_numbers_isset ? 2654435761 : 0;
  if (__big_numbers_isset)
  {
    hash = (hash * 31) ^ [__big_numbers hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestLargeDeltas class]]) {
    return NO;
  }
  ThriftTestLargeDeltas *other = (ThriftTestLargeDeltas *)anObject;
  if ((__b1_isset != other->__b1_isset) ||
      (__b1_isset && ((__b1 || other->__b1) && ![__b1 isEqual:other->__b1]))) {
    return NO;
  }
  if ((__b10_isset != other->__b10_isset) ||
      (__b10_isset && ((__b10 || other->__b10) && ![__b10 isEqual:other->__b10]))) {
    return NO;
  }
  if ((__b100_isset != other->__b100_isset) ||
      (__b100_isset && ((__b100 || other->__b100) && ![__b100 isEqual:other->__b100]))) {
    return NO;
  }
  if ((__check_true_isset != other->__check_true_isset) ||
      (__check_true_isset && (__check_true != other->__check_true))) {
    return NO;
  }
  if ((__b1000_isset != other->__b1000_isset) ||
      (__b1000_isset && ((__b1000 || other->__b1000) && ![__b1000 isEqual:other->__b1000]))) {
    return NO;
  }
  if ((__check_false_isset != other->__check_false_isset) ||
      (__check_false_isset && (__check_false != other->__check_false))) {
    return NO;
  }
  if ((__vertwo2000_isset != other->__vertwo2000_isset) ||
      (__vertwo2000_isset && ((__vertwo2000 || other->__vertwo2000) && ![__vertwo2000 isEqual:other->__vertwo2000]))) {
    return NO;
  }
  if ((__a_set2500_isset != other->__a_set2500_isset) ||
      (__a_set2500_isset && ((__a_set2500 || other->__a_set2500) && ![__a_set2500 isEqual:other->__a_set2500]))) {
    return NO;
  }
  if ((__vertwo3000_isset != other->__vertwo3000_isset) ||
      (__vertwo3000_isset && ((__vertwo3000 || other->__vertwo3000) && ![__vertwo3000 isEqual:other->__vertwo3000]))) {
    return NO;
  }
  if ((__big_numbers_isset != other->__big_numbers_isset) ||
      (__big_numbers_isset && ((__big_numbers || other->__big_numbers) && ![__big_numbers isEqual:other->__big_numbers]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__b1 release_stub];
  [__b10 release_stub];
  [__b100 release_stub];
  [__b1000 release_stub];
  [__vertwo2000 release_stub];
  [__a_set2500 release_stub];
  [__vertwo3000 release_stub];
  [__big_numbers release_stub];
  [super dealloc_stub];
}

- (ThriftTestBools *) b1 {
  return [[__b1 retain_stub] autorelease_stub];
}

- (void) setB1: (ThriftTestBools *) b1 {
  [b1 retain_stub];
  [__b1 release_stub];
  __b1 = b1;
  __b1_isset = YES;
}

- (BOOL) b1IsSet {
  return __b1_isset;
}

- (void) unsetB1 {
  [__b1 release_stub];
  __b1 = nil;
  __b1_isset = NO;
}

- (ThriftTestBools *) b10 {
  return [[__b10 retain_stub] autorelease_stub];
}

- (void) setB10: (ThriftTestBools *) b10 {
  [b10 retain_stub];
  [__b10 release_stub];
  __b10 = b10;
  __b10_isset = YES;
}

- (BOOL) b10IsSet {
  return __b10_isset;
}

- (void) unsetB10 {
  [__b10 release_stub];
  __b10 = nil;
  __b10_isset = NO;
}

- (ThriftTestBools *) b100 {
  return [[__b100 retain_stub] autorelease_stub];
}

- (void) setB100: (ThriftTestBools *) b100 {
  [b100 retain_stub];
  [__b100 release_stub];
  __b100 = b100;
  __b100_isset = YES;
}

- (BOOL) b100IsSet {
  return __b100_isset;
}

- (void) unsetB100 {
  [__b100 release_stub];
  __b100 = nil;
  __b100_isset = NO;
}

- (BOOL) check_true {
  return __check_true;
}

- (void) setCheck_true: (BOOL) check_true {
  __check_true = check_true;
  __check_true_isset = YES;
}

- (BOOL) check_trueIsSet {
  return __check_true_isset;
}

- (void) unsetCheck_true {
  __check_true_isset = NO;
}

- (ThriftTestBools *) b1000 {
  return [[__b1000 retain_stub] autorelease_stub];
}

- (void) setB1000: (ThriftTestBools *) b1000 {
  [b1000 retain_stub];
  [__b1000 release_stub];
  __b1000 = b1000;
  __b1000_isset = YES;
}

- (BOOL) b1000IsSet {
  return __b1000_isset;
}

- (void) unsetB1000 {
  [__b1000 release_stub];
  __b1000 = nil;
  __b1000_isset = NO;
}

- (BOOL) check_false {
  return __check_false;
}

- (void) setCheck_false: (BOOL) check_false {
  __check_false = check_false;
  __check_false_isset = YES;
}

- (BOOL) check_falseIsSet {
  return __check_false_isset;
}

- (void) unsetCheck_false {
  __check_false_isset = NO;
}

- (ThriftTestVersioningTestV2 *) vertwo2000 {
  return [[__vertwo2000 retain_stub] autorelease_stub];
}

- (void) setVertwo2000: (ThriftTestVersioningTestV2 *) vertwo2000 {
  [vertwo2000 retain_stub];
  [__vertwo2000 release_stub];
  __vertwo2000 = vertwo2000;
  __vertwo2000_isset = YES;
}

- (BOOL) vertwo2000IsSet {
  return __vertwo2000_isset;
}

- (void) unsetVertwo2000 {
  [__vertwo2000 release_stub];
  __vertwo2000 = nil;
  __vertwo2000_isset = NO;
}

- (NSMutableSet *) a_set2500 {
  return [[__a_set2500 retain_stub] autorelease_stub];
}

- (void) setA_set2500: (NSMutableSet *) a_set2500 {
  [a_set2500 retain_stub];
  [__a_set2500 release_stub];
  __a_set2500 = a_set2500;
  __a_set2500_isset = YES;
}

- (BOOL) a_set2500IsSet {
  return __a_set2500_isset;
}

- (void) unsetA_set2500 {
  [__a_set2500 release_stub];
  __a_set2500 = nil;
  __a_set2500_isset = NO;
}

- (ThriftTestVersioningTestV2 *) vertwo3000 {
  return [[__vertwo3000 retain_stub] autorelease_stub];
}

- (void) setVertwo3000: (ThriftTestVersioningTestV2 *) vertwo3000 {
  [vertwo3000 retain_stub];
  [__vertwo3000 release_stub];
  __vertwo3000 = vertwo3000;
  __vertwo3000_isset = YES;
}

- (BOOL) vertwo3000IsSet {
  return __vertwo3000_isset;
}

- (void) unsetVertwo3000 {
  [__vertwo3000 release_stub];
  __vertwo3000 = nil;
  __vertwo3000_isset = NO;
}

- (NSMutableArray *) big_numbers {
  return [[__big_numbers retain_stub] autorelease_stub];
}

- (void) setBig_numbers: (NSMutableArray *) big_numbers {
  [big_numbers retain_stub];
  [__big_numbers release_stub];
  __big_numbers = big_numbers;
  __big_numbers_isset = YES;
}

- (BOOL) big_numbersIsSet {
  return __big_numbers_isset;
}

- (void) unsetBig_numbers {
  [__big_numbers release_stub];
  __big_numbers = nil;
  __big_numbers_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ThriftTestBools *fieldValue = [[ThriftTestBools alloc] init];
          [fieldValue read: inProtocol];
          [self setB1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRUCT) {
          ThriftTestBools *fieldValue = [[ThriftTestBools alloc] init];
          [fieldValue read: inProtocol];
          [self setB10: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 100:
        if (fieldType == TType_STRUCT) {
          ThriftTestBools *fieldValue = [[ThriftTestBools alloc] init];
          [fieldValue read: inProtocol];
          [self setB100: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 500:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setCheck_true: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1000:
        if (fieldType == TType_STRUCT) {
          ThriftTestBools *fieldValue = [[ThriftTestBools alloc] init];
          [fieldValue read: inProtocol];
          [self setB1000: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1500:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setCheck_false: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2000:
        if (fieldType == TType_STRUCT) {
          ThriftTestVersioningTestV2 *fieldValue = [[ThriftTestVersioningTestV2 alloc] init];
          [fieldValue read: inProtocol];
          [self setVertwo2000: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2500:
        if (fieldType == TType_SET) {
          int _size86;
          [inProtocol readSetBeginReturningElementType: NULL size: &_size86];
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size86];
          int _i87;
          for (_i87 = 0; _i87 < _size86; ++_i87)
          {
            NSString * _elem88 = [inProtocol readString];
            [fieldValue addObject: _elem88];
          }
          [inProtocol readSetEnd];
          [self setA_set2500: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3000:
        if (fieldType == TType_STRUCT) {
          ThriftTestVersioningTestV2 *fieldValue = [[ThriftTestVersioningTestV2 alloc] init];
          [fieldValue read: inProtocol];
          [self setVertwo3000: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4000:
        if (fieldType == TType_LIST) {
          int _size89;
          [inProtocol readListBeginReturningElementType: NULL size: &_size89];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size89];
          int _i90;
          for (_i90 = 0; _i90 < _size89; ++_i90)
          {
            int32_t _elem91 = [inProtocol readI32];
            [fieldValue addObject: [NSNumber numberWithLong: _elem91]];
          }
          [inProtocol readListEnd];
          [self setBig_numbers: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LargeDeltas"];
  if (__b1_isset) {
    if (__b1 != nil) {
      [outProtocol writeFieldBeginWithName: @"b1" type: TType_STRUCT fieldID: 1];
      [__b1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__b10_isset) {
    if (__b10 != nil) {
      [outProtocol writeFieldBeginWithName: @"b10" type: TType_STRUCT fieldID: 10];
      [__b10 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__b100_isset) {
    if (__b100 != nil) {
      [outProtocol writeFieldBeginWithName: @"b100" type: TType_STRUCT fieldID: 100];
      [__b100 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__check_true_isset) {
    [outProtocol writeFieldBeginWithName: @"check_true" type: TType_BOOL fieldID: 500];
    [outProtocol writeBool: __check_true];
    [outProtocol writeFieldEnd];
  }
  if (__b1000_isset) {
    if (__b1000 != nil) {
      [outProtocol writeFieldBeginWithName: @"b1000" type: TType_STRUCT fieldID: 1000];
      [__b1000 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__check_false_isset) {
    [outProtocol writeFieldBeginWithName: @"check_false" type: TType_BOOL fieldID: 1500];
    [outProtocol writeBool: __check_false];
    [outProtocol writeFieldEnd];
  }
  if (__vertwo2000_isset) {
    if (__vertwo2000 != nil) {
      [outProtocol writeFieldBeginWithName: @"vertwo2000" type: TType_STRUCT fieldID: 2000];
      [__vertwo2000 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__a_set2500_isset) {
    if (__a_set2500 != nil) {
      [outProtocol writeFieldBeginWithName: @"a_set2500" type: TType_SET fieldID: 2500];
      {
        [outProtocol writeSetBeginWithElementType: TType_STRING size: [__a_set2500 count]];
        NSEnumerator * _iter92 = [__a_set2500 objectEnumerator];
        id obj93;
        while ((obj93 = [_iter92 nextObject]))
        {
          [outProtocol writeString: obj93];
        }
        [outProtocol writeSetEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__vertwo3000_isset) {
    if (__vertwo3000 != nil) {
      [outProtocol writeFieldBeginWithName: @"vertwo3000" type: TType_STRUCT fieldID: 3000];
      [__vertwo3000 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__big_numbers_isset) {
    if (__big_numbers != nil) {
      [outProtocol writeFieldBeginWithName: @"big_numbers" type: TType_LIST fieldID: 4000];
      {
        [outProtocol writeListBeginWithElementType: TType_I32 size: [__big_numbers count]];
        int idx95;
        for (idx95 = 0; idx95 < [__big_numbers count]; idx95++)
        {
          [outProtocol writeI32: [[__big_numbers objectAtIndex: idx95] longValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestLargeDeltas("];
  [ms appendString: @"b1:"];
  [ms appendFormat: @"%@", __b1];
  [ms appendString: @",b10:"];
  [ms appendFormat: @"%@", __b10];
  [ms appendString: @",b100:"];
  [ms appendFormat: @"%@", __b100];
  [ms appendString: @",check_true:"];
  [ms appendFormat: @"%i", __check_true];
  [ms appendString: @",b1000:"];
  [ms appendFormat: @"%@", __b1000];
  [ms appendString: @",check_false:"];
  [ms appendFormat: @"%i", __check_false];
  [ms appendString: @",vertwo2000:"];
  [ms appendFormat: @"%@", __vertwo2000];
  [ms appendString: @",a_set2500:"];
  [ms appendFormat: @"%@", __a_set2500];
  [ms appendString: @",vertwo3000:"];
  [ms appendFormat: @"%@", __vertwo3000];
  [ms appendString: @",big_numbers:"];
  [ms appendFormat: @"%@", __big_numbers];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ThriftTestNestedListsI32x2

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithIntegerlist: (NSMutableArray *) integerlist
{
  self = [super init];
  __integerlist = [integerlist retain_stub];
  __integerlist_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"integerlist"])
  {
    __integerlist = [[decoder decodeObjectForKey: @"integerlist"] retain_stub];
    __integerlist_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__integerlist_isset)
  {
    [encoder encodeObject: __integerlist forKey: @"integerlist"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __integerlist_isset ? 2654435761 : 0;
  if (__integerlist_isset)
  {
    hash = (hash * 31) ^ [__integerlist hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestNestedListsI32x2 class]]) {
    return NO;
  }
  ThriftTestNestedListsI32x2 *other = (ThriftTestNestedListsI32x2 *)anObject;
  if ((__integerlist_isset != other->__integerlist_isset) ||
      (__integerlist_isset && ((__integerlist || other->__integerlist) && ![__integerlist isEqual:other->__integerlist]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__integerlist release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) integerlist {
  return [[__integerlist retain_stub] autorelease_stub];
}

- (void) setIntegerlist: (NSMutableArray *) integerlist {
  [integerlist retain_stub];
  [__integerlist release_stub];
  __integerlist = integerlist;
  __integerlist_isset = YES;
}

- (BOOL) integerlistIsSet {
  return __integerlist_isset;
}

- (void) unsetIntegerlist {
  [__integerlist release_stub];
  __integerlist = nil;
  __integerlist_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size96;
          [inProtocol readListBeginReturningElementType: NULL size: &_size96];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size96];
          int _i97;
          for (_i97 = 0; _i97 < _size96; ++_i97)
          {
            int _size99;
            [inProtocol readListBeginReturningElementType: NULL size: &_size99];
            NSMutableArray * _elem98 = [[NSMutableArray alloc] initWithCapacity: _size99];
            int _i100;
            for (_i100 = 0; _i100 < _size99; ++_i100)
            {
              int32_t _elem101 = [inProtocol readI32];
              [_elem98 addObject: [NSNumber numberWithLong: _elem101]];
            }
            [inProtocol readListEnd];
            [fieldValue addObject: _elem98];
            [_elem98 release_stub];
          }
          [inProtocol readListEnd];
          [self setIntegerlist: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"NestedListsI32x2"];
  if (__integerlist_isset) {
    if (__integerlist != nil) {
      [outProtocol writeFieldBeginWithName: @"integerlist" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_LIST size: [__integerlist count]];
        int idx103;
        for (idx103 = 0; idx103 < [__integerlist count]; idx103++)
        {
          {
            [outProtocol writeListBeginWithElementType: TType_I32 size: [[__integerlist objectAtIndex: idx103] count]];
            int idx105;
            for (idx105 = 0; idx105 < [[__integerlist objectAtIndex: idx103] count]; idx105++)
            {
              [outProtocol writeI32: [[[__integerlist objectAtIndex: idx103] objectAtIndex: idx105] longValue]];
            }
            [outProtocol writeListEnd];
          }
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestNestedListsI32x2("];
  [ms appendString: @"integerlist:"];
  [ms appendFormat: @"%@", __integerlist];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ThriftTestNestedListsI32x3

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithIntegerlist: (NSMutableArray *) integerlist
{
  self = [super init];
  __integerlist = [integerlist retain_stub];
  __integerlist_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"integerlist"])
  {
    __integerlist = [[decoder decodeObjectForKey: @"integerlist"] retain_stub];
    __integerlist_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__integerlist_isset)
  {
    [encoder encodeObject: __integerlist forKey: @"integerlist"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __integerlist_isset ? 2654435761 : 0;
  if (__integerlist_isset)
  {
    hash = (hash * 31) ^ [__integerlist hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestNestedListsI32x3 class]]) {
    return NO;
  }
  ThriftTestNestedListsI32x3 *other = (ThriftTestNestedListsI32x3 *)anObject;
  if ((__integerlist_isset != other->__integerlist_isset) ||
      (__integerlist_isset && ((__integerlist || other->__integerlist) && ![__integerlist isEqual:other->__integerlist]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__integerlist release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) integerlist {
  return [[__integerlist retain_stub] autorelease_stub];
}

- (void) setIntegerlist: (NSMutableArray *) integerlist {
  [integerlist retain_stub];
  [__integerlist release_stub];
  __integerlist = integerlist;
  __integerlist_isset = YES;
}

- (BOOL) integerlistIsSet {
  return __integerlist_isset;
}

- (void) unsetIntegerlist {
  [__integerlist release_stub];
  __integerlist = nil;
  __integerlist_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size106;
          [inProtocol readListBeginReturningElementType: NULL size: &_size106];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size106];
          int _i107;
          for (_i107 = 0; _i107 < _size106; ++_i107)
          {
            int _size109;
            [inProtocol readListBeginReturningElementType: NULL size: &_size109];
            NSMutableArray * _elem108 = [[NSMutableArray alloc] initWithCapacity: _size109];
            int _i110;
            for (_i110 = 0; _i110 < _size109; ++_i110)
            {
              int _size112;
              [inProtocol readListBeginReturningElementType: NULL size: &_size112];
              NSMutableArray * _elem111 = [[NSMutableArray alloc] initWithCapacity: _size112];
              int _i113;
              for (_i113 = 0; _i113 < _size112; ++_i113)
              {
                int32_t _elem114 = [inProtocol readI32];
                [_elem111 addObject: [NSNumber numberWithLong: _elem114]];
              }
              [inProtocol readListEnd];
              [_elem108 addObject: _elem111];
              [_elem111 release_stub];
            }
            [inProtocol readListEnd];
            [fieldValue addObject: _elem108];
            [_elem108 release_stub];
          }
          [inProtocol readListEnd];
          [self setIntegerlist: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"NestedListsI32x3"];
  if (__integerlist_isset) {
    if (__integerlist != nil) {
      [outProtocol writeFieldBeginWithName: @"integerlist" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_LIST size: [__integerlist count]];
        int idx116;
        for (idx116 = 0; idx116 < [__integerlist count]; idx116++)
        {
          {
            [outProtocol writeListBeginWithElementType: TType_LIST size: [[__integerlist objectAtIndex: idx116] count]];
            int idx118;
            for (idx118 = 0; idx118 < [[__integerlist objectAtIndex: idx116] count]; idx118++)
            {
              {
                [outProtocol writeListBeginWithElementType: TType_I32 size: [[[__integerlist objectAtIndex: idx116] objectAtIndex: idx118] count]];
                int idx120;
                for (idx120 = 0; idx120 < [[[__integerlist objectAtIndex: idx116] objectAtIndex: idx118] count]; idx120++)
                {
                  [outProtocol writeI32: [[[[__integerlist objectAtIndex: idx116] objectAtIndex: idx118] objectAtIndex: idx120] longValue]];
                }
                [outProtocol writeListEnd];
              }
            }
            [outProtocol writeListEnd];
          }
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestNestedListsI32x3("];
  [ms appendString: @"integerlist:"];
  [ms appendFormat: @"%@", __integerlist];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ThriftTestNestedMixedx2

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithInt_set_list: (NSMutableArray *) int_set_list map_int_strset: (NSMutableDictionary *) map_int_strset map_int_strset_list: (NSMutableArray *) map_int_strset_list
{
  self = [super init];
  __int_set_list = [int_set_list retain_stub];
  __int_set_list_isset = YES;
  __map_int_strset = [map_int_strset retain_stub];
  __map_int_strset_isset = YES;
  __map_int_strset_list = [map_int_strset_list retain_stub];
  __map_int_strset_list_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"int_set_list"])
  {
    __int_set_list = [[decoder decodeObjectForKey: @"int_set_list"] retain_stub];
    __int_set_list_isset = YES;
  }
  if ([decoder containsValueForKey: @"map_int_strset"])
  {
    __map_int_strset = [[decoder decodeObjectForKey: @"map_int_strset"] retain_stub];
    __map_int_strset_isset = YES;
  }
  if ([decoder containsValueForKey: @"map_int_strset_list"])
  {
    __map_int_strset_list = [[decoder decodeObjectForKey: @"map_int_strset_list"] retain_stub];
    __map_int_strset_list_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__int_set_list_isset)
  {
    [encoder encodeObject: __int_set_list forKey: @"int_set_list"];
  }
  if (__map_int_strset_isset)
  {
    [encoder encodeObject: __map_int_strset forKey: @"map_int_strset"];
  }
  if (__map_int_strset_list_isset)
  {
    [encoder encodeObject: __map_int_strset_list forKey: @"map_int_strset_list"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __int_set_list_isset ? 2654435761 : 0;
  if (__int_set_list_isset)
  {
    hash = (hash * 31) ^ [__int_set_list hash];
  }
  hash = (hash * 31) ^ __map_int_strset_isset ? 2654435761 : 0;
  if (__map_int_strset_isset)
  {
    hash = (hash * 31) ^ [__map_int_strset hash];
  }
  hash = (hash * 31) ^ __map_int_strset_list_isset ? 2654435761 : 0;
  if (__map_int_strset_list_isset)
  {
    hash = (hash * 31) ^ [__map_int_strset_list hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestNestedMixedx2 class]]) {
    return NO;
  }
  ThriftTestNestedMixedx2 *other = (ThriftTestNestedMixedx2 *)anObject;
  if ((__int_set_list_isset != other->__int_set_list_isset) ||
      (__int_set_list_isset && ((__int_set_list || other->__int_set_list) && ![__int_set_list isEqual:other->__int_set_list]))) {
    return NO;
  }
  if ((__map_int_strset_isset != other->__map_int_strset_isset) ||
      (__map_int_strset_isset && ((__map_int_strset || other->__map_int_strset) && ![__map_int_strset isEqual:other->__map_int_strset]))) {
    return NO;
  }
  if ((__map_int_strset_list_isset != other->__map_int_strset_list_isset) ||
      (__map_int_strset_list_isset && ((__map_int_strset_list || other->__map_int_strset_list) && ![__map_int_strset_list isEqual:other->__map_int_strset_list]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__int_set_list release_stub];
  [__map_int_strset release_stub];
  [__map_int_strset_list release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) int_set_list {
  return [[__int_set_list retain_stub] autorelease_stub];
}

- (void) setInt_set_list: (NSMutableArray *) int_set_list {
  [int_set_list retain_stub];
  [__int_set_list release_stub];
  __int_set_list = int_set_list;
  __int_set_list_isset = YES;
}

- (BOOL) int_set_listIsSet {
  return __int_set_list_isset;
}

- (void) unsetInt_set_list {
  [__int_set_list release_stub];
  __int_set_list = nil;
  __int_set_list_isset = NO;
}

- (NSMutableDictionary *) map_int_strset {
  return [[__map_int_strset retain_stub] autorelease_stub];
}

- (void) setMap_int_strset: (NSMutableDictionary *) map_int_strset {
  [map_int_strset retain_stub];
  [__map_int_strset release_stub];
  __map_int_strset = map_int_strset;
  __map_int_strset_isset = YES;
}

- (BOOL) map_int_strsetIsSet {
  return __map_int_strset_isset;
}

- (void) unsetMap_int_strset {
  [__map_int_strset release_stub];
  __map_int_strset = nil;
  __map_int_strset_isset = NO;
}

- (NSMutableArray *) map_int_strset_list {
  return [[__map_int_strset_list retain_stub] autorelease_stub];
}

- (void) setMap_int_strset_list: (NSMutableArray *) map_int_strset_list {
  [map_int_strset_list retain_stub];
  [__map_int_strset_list release_stub];
  __map_int_strset_list = map_int_strset_list;
  __map_int_strset_list_isset = YES;
}

- (BOOL) map_int_strset_listIsSet {
  return __map_int_strset_list_isset;
}

- (void) unsetMap_int_strset_list {
  [__map_int_strset_list release_stub];
  __map_int_strset_list = nil;
  __map_int_strset_list_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size121;
          [inProtocol readListBeginReturningElementType: NULL size: &_size121];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size121];
          int _i122;
          for (_i122 = 0; _i122 < _size121; ++_i122)
          {
            int _size124;
            [inProtocol readSetBeginReturningElementType: NULL size: &_size124];
            NSMutableSet * _elem123 = [[NSMutableSet alloc] initWithCapacity: _size124];
            int _i125;
            for (_i125 = 0; _i125 < _size124; ++_i125)
            {
              int32_t _elem126 = [inProtocol readI32];
              [_elem123 addObject: [NSNumber numberWithLong: _elem126]];
            }
            [inProtocol readSetEnd];
            [fieldValue addObject: _elem123];
            [_elem123 release_stub];
          }
          [inProtocol readListEnd];
          [self setInt_set_list: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_MAP) {
          int _size127;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size127];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size127];
          int _i128;
          for (_i128 = 0; _i128 < _size127; ++_i128)
          {
            int32_t _key129 = [inProtocol readI32];
            int _size131;
            [inProtocol readSetBeginReturningElementType: NULL size: &_size131];
            NSMutableSet * _val130 = [[NSMutableSet alloc] initWithCapacity: _size131];
            int _i132;
            for (_i132 = 0; _i132 < _size131; ++_i132)
            {
              NSString * _elem133 = [inProtocol readString];
              [_val130 addObject: _elem133];
            }
            [inProtocol readSetEnd];
            [fieldValue setObject: _val130 forKey: [NSNumber numberWithLong: _key129]];
            [_val130 release_stub];
          }
          [inProtocol readMapEnd];
          [self setMap_int_strset: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size134;
          [inProtocol readListBeginReturningElementType: NULL size: &_size134];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size134];
          int _i135;
          for (_i135 = 0; _i135 < _size134; ++_i135)
          {
            int _size137;
            [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size137];
            NSMutableDictionary * _elem136 = [[NSMutableDictionary alloc] initWithCapacity: _size137];
            int _i138;
            for (_i138 = 0; _i138 < _size137; ++_i138)
            {
              int32_t _key139 = [inProtocol readI32];
              int _size141;
              [inProtocol readSetBeginReturningElementType: NULL size: &_size141];
              NSMutableSet * _val140 = [[NSMutableSet alloc] initWithCapacity: _size141];
              int _i142;
              for (_i142 = 0; _i142 < _size141; ++_i142)
              {
                NSString * _elem143 = [inProtocol readString];
                [_val140 addObject: _elem143];
              }
              [inProtocol readSetEnd];
              [_elem136 setObject: _val140 forKey: [NSNumber numberWithLong: _key139]];
              [_val140 release_stub];
            }
            [inProtocol readMapEnd];
            [fieldValue addObject: _elem136];
            [_elem136 release_stub];
          }
          [inProtocol readListEnd];
          [self setMap_int_strset_list: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"NestedMixedx2"];
  if (__int_set_list_isset) {
    if (__int_set_list != nil) {
      [outProtocol writeFieldBeginWithName: @"int_set_list" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_SET size: [__int_set_list count]];
        int idx145;
        for (idx145 = 0; idx145 < [__int_set_list count]; idx145++)
        {
          {
            [outProtocol writeSetBeginWithElementType: TType_I32 size: [[__int_set_list objectAtIndex: idx145] count]];
            NSEnumerator * _iter146 = [[__int_set_list objectAtIndex: idx145] objectEnumerator];
            id obj147;
            while ((obj147 = [_iter146 nextObject]))
            {
              [outProtocol writeI32: [obj147 longValue]];
            }
            [outProtocol writeSetEnd];
          }
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__map_int_strset_isset) {
    if (__map_int_strset != nil) {
      [outProtocol writeFieldBeginWithName: @"map_int_strset" type: TType_MAP fieldID: 2];
      {
        [outProtocol writeMapBeginWithKeyType: TType_I32 valueType: TType_SET size: [__map_int_strset count]];
        NSEnumerator * _iter148 = [__map_int_strset keyEnumerator];
        id key149;
        while ((key149 = [_iter148 nextObject]))
        {
          [outProtocol writeI32: [key149 longValue]];
          {
            [outProtocol writeSetBeginWithElementType: TType_STRING size: [[__map_int_strset objectForKey: key149] count]];
            NSEnumerator * _iter150 = [[__map_int_strset objectForKey: key149] objectEnumerator];
            id obj151;
            while ((obj151 = [_iter150 nextObject]))
            {
              [outProtocol writeString: obj151];
            }
            [outProtocol writeSetEnd];
          }
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__map_int_strset_list_isset) {
    if (__map_int_strset_list != nil) {
      [outProtocol writeFieldBeginWithName: @"map_int_strset_list" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_MAP size: [__map_int_strset_list count]];
        int idx153;
        for (idx153 = 0; idx153 < [__map_int_strset_list count]; idx153++)
        {
          {
            [outProtocol writeMapBeginWithKeyType: TType_I32 valueType: TType_SET size: [[__map_int_strset_list objectAtIndex: idx153] count]];
            NSEnumerator * _iter154 = [[__map_int_strset_list objectAtIndex: idx153] keyEnumerator];
            id key155;
            while ((key155 = [_iter154 nextObject]))
            {
              [outProtocol writeI32: [key155 longValue]];
              {
                [outProtocol writeSetBeginWithElementType: TType_STRING size: [[[__map_int_strset_list objectAtIndex: idx153] objectForKey: key155] count]];
                NSEnumerator * _iter156 = [[[__map_int_strset_list objectAtIndex: idx153] objectForKey: key155] objectEnumerator];
                id obj157;
                while ((obj157 = [_iter156 nextObject]))
                {
                  [outProtocol writeString: obj157];
                }
                [outProtocol writeSetEnd];
              }
            }
            [outProtocol writeMapEnd];
          }
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestNestedMixedx2("];
  [ms appendString: @"int_set_list:"];
  [ms appendFormat: @"%@", __int_set_list];
  [ms appendString: @",map_int_strset:"];
  [ms appendFormat: @"%@", __map_int_strset];
  [ms appendString: @",map_int_strset_list:"];
  [ms appendFormat: @"%@", __map_int_strset_list];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ThriftTestListBonks

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithBonk: (NSMutableArray *) bonk
{
  self = [super init];
  __bonk = [bonk retain_stub];
  __bonk_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"bonk"])
  {
    __bonk = [[decoder decodeObjectForKey: @"bonk"] retain_stub];
    __bonk_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__bonk_isset)
  {
    [encoder encodeObject: __bonk forKey: @"bonk"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __bonk_isset ? 2654435761 : 0;
  if (__bonk_isset)
  {
    hash = (hash * 31) ^ [__bonk hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestListBonks class]]) {
    return NO;
  }
  ThriftTestListBonks *other = (ThriftTestListBonks *)anObject;
  if ((__bonk_isset != other->__bonk_isset) ||
      (__bonk_isset && ((__bonk || other->__bonk) && ![__bonk isEqual:other->__bonk]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__bonk release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) bonk {
  return [[__bonk retain_stub] autorelease_stub];
}

- (void) setBonk: (NSMutableArray *) bonk {
  [bonk retain_stub];
  [__bonk release_stub];
  __bonk = bonk;
  __bonk_isset = YES;
}

- (BOOL) bonkIsSet {
  return __bonk_isset;
}

- (void) unsetBonk {
  [__bonk release_stub];
  __bonk = nil;
  __bonk_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size158;
          [inProtocol readListBeginReturningElementType: NULL size: &_size158];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size158];
          int _i159;
          for (_i159 = 0; _i159 < _size158; ++_i159)
          {
            ThriftTestBonk *_elem160 = [[ThriftTestBonk alloc] init];
            [_elem160 read: inProtocol];
            [fieldValue addObject: _elem160];
            [_elem160 release_stub];
          }
          [inProtocol readListEnd];
          [self setBonk: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ListBonks"];
  if (__bonk_isset) {
    if (__bonk != nil) {
      [outProtocol writeFieldBeginWithName: @"bonk" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__bonk count]];
        int idx162;
        for (idx162 = 0; idx162 < [__bonk count]; idx162++)
        {
          [[__bonk objectAtIndex: idx162] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestListBonks("];
  [ms appendString: @"bonk:"];
  [ms appendFormat: @"%@", __bonk];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ThriftTestNestedListsBonk

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithBonk: (NSMutableArray *) bonk
{
  self = [super init];
  __bonk = [bonk retain_stub];
  __bonk_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"bonk"])
  {
    __bonk = [[decoder decodeObjectForKey: @"bonk"] retain_stub];
    __bonk_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__bonk_isset)
  {
    [encoder encodeObject: __bonk forKey: @"bonk"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __bonk_isset ? 2654435761 : 0;
  if (__bonk_isset)
  {
    hash = (hash * 31) ^ [__bonk hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestNestedListsBonk class]]) {
    return NO;
  }
  ThriftTestNestedListsBonk *other = (ThriftTestNestedListsBonk *)anObject;
  if ((__bonk_isset != other->__bonk_isset) ||
      (__bonk_isset && ((__bonk || other->__bonk) && ![__bonk isEqual:other->__bonk]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__bonk release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) bonk {
  return [[__bonk retain_stub] autorelease_stub];
}

- (void) setBonk: (NSMutableArray *) bonk {
  [bonk retain_stub];
  [__bonk release_stub];
  __bonk = bonk;
  __bonk_isset = YES;
}

- (BOOL) bonkIsSet {
  return __bonk_isset;
}

- (void) unsetBonk {
  [__bonk release_stub];
  __bonk = nil;
  __bonk_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size163;
          [inProtocol readListBeginReturningElementType: NULL size: &_size163];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size163];
          int _i164;
          for (_i164 = 0; _i164 < _size163; ++_i164)
          {
            int _size166;
            [inProtocol readListBeginReturningElementType: NULL size: &_size166];
            NSMutableArray * _elem165 = [[NSMutableArray alloc] initWithCapacity: _size166];
            int _i167;
            for (_i167 = 0; _i167 < _size166; ++_i167)
            {
              int _size169;
              [inProtocol readListBeginReturningElementType: NULL size: &_size169];
              NSMutableArray * _elem168 = [[NSMutableArray alloc] initWithCapacity: _size169];
              int _i170;
              for (_i170 = 0; _i170 < _size169; ++_i170)
              {
                ThriftTestBonk *_elem171 = [[ThriftTestBonk alloc] init];
                [_elem171 read: inProtocol];
                [_elem168 addObject: _elem171];
                [_elem171 release_stub];
              }
              [inProtocol readListEnd];
              [_elem165 addObject: _elem168];
              [_elem168 release_stub];
            }
            [inProtocol readListEnd];
            [fieldValue addObject: _elem165];
            [_elem165 release_stub];
          }
          [inProtocol readListEnd];
          [self setBonk: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"NestedListsBonk"];
  if (__bonk_isset) {
    if (__bonk != nil) {
      [outProtocol writeFieldBeginWithName: @"bonk" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_LIST size: [__bonk count]];
        int idx173;
        for (idx173 = 0; idx173 < [__bonk count]; idx173++)
        {
          {
            [outProtocol writeListBeginWithElementType: TType_LIST size: [[__bonk objectAtIndex: idx173] count]];
            int idx175;
            for (idx175 = 0; idx175 < [[__bonk objectAtIndex: idx173] count]; idx175++)
            {
              {
                [outProtocol writeListBeginWithElementType: TType_STRUCT size: [[[__bonk objectAtIndex: idx173] objectAtIndex: idx175] count]];
                int idx177;
                for (idx177 = 0; idx177 < [[[__bonk objectAtIndex: idx173] objectAtIndex: idx175] count]; idx177++)
                {
                  [[[[__bonk objectAtIndex: idx173] objectAtIndex: idx175] objectAtIndex: idx177] write: outProtocol];
                }
                [outProtocol writeListEnd];
              }
            }
            [outProtocol writeListEnd];
          }
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestNestedListsBonk("];
  [ms appendString: @"bonk:"];
  [ms appendFormat: @"%@", __bonk];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ThriftTestBoolTest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.b = YES;

  self.s = @"true";

#endif
  return self;
}

- (id) initWithB: (BOOL) b s: (NSString *) s
{
  self = [super init];
  __b = b;
  __b_isset = YES;
  __s = [s retain_stub];
  __s_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"b"])
  {
    __b = [decoder decodeBoolForKey: @"b"];
    __b_isset = YES;
  }
  if ([decoder containsValueForKey: @"s"])
  {
    __s = [[decoder decodeObjectForKey: @"s"] retain_stub];
    __s_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__b_isset)
  {
    [encoder encodeBool: __b forKey: @"b"];
  }
  if (__s_isset)
  {
    [encoder encodeObject: __s forKey: @"s"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __b_isset ? 2654435761 : 0;
  if (__b_isset)
  {
    hash = (hash * 31) ^ [@(__b) hash];
  }
  hash = (hash * 31) ^ __s_isset ? 2654435761 : 0;
  if (__s_isset)
  {
    hash = (hash * 31) ^ [__s hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestBoolTest class]]) {
    return NO;
  }
  ThriftTestBoolTest *other = (ThriftTestBoolTest *)anObject;
  if ((__b_isset != other->__b_isset) ||
      (__b_isset && (__b != other->__b))) {
    return NO;
  }
  if ((__s_isset != other->__s_isset) ||
      (__s_isset && ((__s || other->__s) && ![__s isEqual:other->__s]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__s release_stub];
  [super dealloc_stub];
}

- (BOOL) b {
  return __b;
}

- (void) setB: (BOOL) b {
  __b = b;
  __b_isset = YES;
}

- (BOOL) bIsSet {
  return __b_isset;
}

- (void) unsetB {
  __b_isset = NO;
}

- (NSString *) s {
  return [[__s retain_stub] autorelease_stub];
}

- (void) setS: (NSString *) s {
  [s retain_stub];
  [__s release_stub];
  __s = s;
  __s_isset = YES;
}

- (BOOL) sIsSet {
  return __s_isset;
}

- (void) unsetS {
  [__s release_stub];
  __s = nil;
  __s_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setB: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setS: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BoolTest"];
  if (__b_isset) {
    [outProtocol writeFieldBeginWithName: @"b" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __b];
    [outProtocol writeFieldEnd];
  }
  if (__s_isset) {
    if (__s != nil) {
      [outProtocol writeFieldBeginWithName: @"s" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __s];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestBoolTest("];
  [ms appendString: @"b:"];
  [ms appendFormat: @"%i", __b];
  [ms appendString: @",s:"];
  [ms appendFormat: @"\"%@\"", __s];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ThriftTestStructA

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithS: (NSString *) s
{
  self = [super init];
  __s = [s retain_stub];
  __s_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"s"])
  {
    __s = [[decoder decodeObjectForKey: @"s"] retain_stub];
    __s_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__s_isset)
  {
    [encoder encodeObject: __s forKey: @"s"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __s_isset ? 2654435761 : 0;
  if (__s_isset)
  {
    hash = (hash * 31) ^ [__s hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestStructA class]]) {
    return NO;
  }
  ThriftTestStructA *other = (ThriftTestStructA *)anObject;
  if ((__s_isset != other->__s_isset) ||
      (__s_isset && ((__s || other->__s) && ![__s isEqual:other->__s]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__s release_stub];
  [super dealloc_stub];
}

- (NSString *) s {
  return [[__s retain_stub] autorelease_stub];
}

- (void) setS: (NSString *) s {
  [s retain_stub];
  [__s release_stub];
  __s = s;
  __s_isset = YES;
}

- (BOOL) sIsSet {
  return __s_isset;
}

- (void) unsetS {
  [__s release_stub];
  __s = nil;
  __s_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setS: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"StructA"];
  if (__s_isset) {
    if (__s != nil) {
      [outProtocol writeFieldBeginWithName: @"s" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __s];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__s_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 's' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestStructA("];
  [ms appendString: @"s:"];
  [ms appendFormat: @"\"%@\"", __s];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ThriftTestStructB

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAa: (ThriftTestStructA *) aa ab: (ThriftTestStructA *) ab
{
  self = [super init];
  __aa = [aa retain_stub];
  __aa_isset = YES;
  __ab = [ab retain_stub];
  __ab_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"aa"])
  {
    __aa = [[decoder decodeObjectForKey: @"aa"] retain_stub];
    __aa_isset = YES;
  }
  if ([decoder containsValueForKey: @"ab"])
  {
    __ab = [[decoder decodeObjectForKey: @"ab"] retain_stub];
    __ab_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__aa_isset)
  {
    [encoder encodeObject: __aa forKey: @"aa"];
  }
  if (__ab_isset)
  {
    [encoder encodeObject: __ab forKey: @"ab"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __aa_isset ? 2654435761 : 0;
  if (__aa_isset)
  {
    hash = (hash * 31) ^ [__aa hash];
  }
  hash = (hash * 31) ^ __ab_isset ? 2654435761 : 0;
  if (__ab_isset)
  {
    hash = (hash * 31) ^ [__ab hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestStructB class]]) {
    return NO;
  }
  ThriftTestStructB *other = (ThriftTestStructB *)anObject;
  if ((__aa_isset != other->__aa_isset) ||
      (__aa_isset && ((__aa || other->__aa) && ![__aa isEqual:other->__aa]))) {
    return NO;
  }
  if ((__ab_isset != other->__ab_isset) ||
      (__ab_isset && ((__ab || other->__ab) && ![__ab isEqual:other->__ab]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__aa release_stub];
  [__ab release_stub];
  [super dealloc_stub];
}

- (ThriftTestStructA *) aa {
  return [[__aa retain_stub] autorelease_stub];
}

- (void) setAa: (ThriftTestStructA *) aa {
  [aa retain_stub];
  [__aa release_stub];
  __aa = aa;
  __aa_isset = YES;
}

- (BOOL) aaIsSet {
  return __aa_isset;
}

- (void) unsetAa {
  [__aa release_stub];
  __aa = nil;
  __aa_isset = NO;
}

- (ThriftTestStructA *) ab {
  return [[__ab retain_stub] autorelease_stub];
}

- (void) setAb: (ThriftTestStructA *) ab {
  [ab retain_stub];
  [__ab release_stub];
  __ab = ab;
  __ab_isset = YES;
}

- (BOOL) abIsSet {
  return __ab_isset;
}

- (void) unsetAb {
  [__ab release_stub];
  __ab = nil;
  __ab_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ThriftTestStructA *fieldValue = [[ThriftTestStructA alloc] init];
          [fieldValue read: inProtocol];
          [self setAa: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          ThriftTestStructA *fieldValue = [[ThriftTestStructA alloc] init];
          [fieldValue read: inProtocol];
          [self setAb: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"StructB"];
  if (__aa_isset) {
    if (__aa != nil) {
      [outProtocol writeFieldBeginWithName: @"aa" type: TType_STRUCT fieldID: 1];
      [__aa write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ab_isset) {
    if (__ab != nil) {
      [outProtocol writeFieldBeginWithName: @"ab" type: TType_STRUCT fieldID: 2];
      [__ab write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__ab_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'ab' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestStructB("];
  [ms appendString: @"aa:"];
  [ms appendFormat: @"%@", __aa];
  [ms appendString: @",ab:"];
  [ms appendFormat: @"%@", __ab];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

static int ThriftTestmyNumberz = 1;

@implementation ThriftTestThriftTestConstants
+ (void) initialize {
}
+ (int) myNumberz{
  return ThriftTestmyNumberz;
}
@end

@interface ThriftTesttestVoid_args : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation ThriftTesttestVoid_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTesttestVoid_args class]]) {
    return NO;
  }
  ThriftTesttestVoid_args *other = (ThriftTesttestVoid_args *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"testVoid_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTesttestVoid_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTestTestVoid_result : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation ThriftTestTestVoid_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestTestVoid_result class]]) {
    return NO;
  }
  ThriftTestTestVoid_result *other = (ThriftTestTestVoid_result *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TestVoid_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestTestVoid_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTesttestString_args : NSObject <TBase, NSCoding> {
  NSString * __thing;

  BOOL __thing_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=thing, setter=setThing:) NSString * thing;
#endif

- (id) init;
- (id) initWithThing: (NSString *) thing;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) thing;
- (void) setThing: (NSString *) thing;
#endif
- (BOOL) thingIsSet;

@end

@implementation ThriftTesttestString_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithThing: (NSString *) thing
{
  self = [super init];
  __thing = [thing retain_stub];
  __thing_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"thing"])
  {
    __thing = [[decoder decodeObjectForKey: @"thing"] retain_stub];
    __thing_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__thing_isset)
  {
    [encoder encodeObject: __thing forKey: @"thing"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __thing_isset ? 2654435761 : 0;
  if (__thing_isset)
  {
    hash = (hash * 31) ^ [__thing hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTesttestString_args class]]) {
    return NO;
  }
  ThriftTesttestString_args *other = (ThriftTesttestString_args *)anObject;
  if ((__thing_isset != other->__thing_isset) ||
      (__thing_isset && ((__thing || other->__thing) && ![__thing isEqual:other->__thing]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__thing release_stub];
  [super dealloc_stub];
}

- (NSString *) thing {
  return [[__thing retain_stub] autorelease_stub];
}

- (void) setThing: (NSString *) thing {
  [thing retain_stub];
  [__thing release_stub];
  __thing = thing;
  __thing_isset = YES;
}

- (BOOL) thingIsSet {
  return __thing_isset;
}

- (void) unsetThing {
  [__thing release_stub];
  __thing = nil;
  __thing_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setThing: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"testString_args"];
  if (__thing_isset) {
    if (__thing != nil) {
      [outProtocol writeFieldBeginWithName: @"thing" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __thing];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTesttestString_args("];
  [ms appendString: @"thing:"];
  [ms appendFormat: @"\"%@\"", __thing];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTestTestString_result : NSObject <TBase, NSCoding> {
  NSString * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ThriftTestTestString_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestTestString_result class]]) {
    return NO;
  }
  ThriftTestTestString_result *other = (ThriftTestTestString_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TestString_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestTestString_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTesttestByte_args : NSObject <TBase, NSCoding> {
  uint8_t __thing;

  BOOL __thing_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=thing, setter=setThing:) uint8_t thing;
#endif

- (id) init;
- (id) initWithThing: (uint8_t) thing;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (uint8_t) thing;
- (void) setThing: (uint8_t) thing;
#endif
- (BOOL) thingIsSet;

@end

@implementation ThriftTesttestByte_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithThing: (uint8_t) thing
{
  self = [super init];
  __thing = thing;
  __thing_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"thing"])
  {
    __thing = [decoder decodeIntForKey: @"thing"];
    __thing_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__thing_isset)
  {
    [encoder encodeInt: __thing forKey: @"thing"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __thing_isset ? 2654435761 : 0;
  if (__thing_isset)
  {
    hash = (hash * 31) ^ [@(__thing) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTesttestByte_args class]]) {
    return NO;
  }
  ThriftTesttestByte_args *other = (ThriftTesttestByte_args *)anObject;
  if ((__thing_isset != other->__thing_isset) ||
      (__thing_isset && (__thing != other->__thing))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (uint8_t) thing {
  return __thing;
}

- (void) setThing: (uint8_t) thing {
  __thing = thing;
  __thing_isset = YES;
}

- (BOOL) thingIsSet {
  return __thing_isset;
}

- (void) unsetThing {
  __thing_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setThing: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"testByte_args"];
  if (__thing_isset) {
    [outProtocol writeFieldBeginWithName: @"thing" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: __thing];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTesttestByte_args("];
  [ms appendString: @"thing:"];
  [ms appendFormat: @"%i", __thing];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTestTestByte_result : NSObject <TBase, NSCoding> {
  uint8_t __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) uint8_t success;
#endif

- (id) init;
- (id) initWithSuccess: (uint8_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (uint8_t) success;
- (void) setSuccess: (uint8_t) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ThriftTestTestByte_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (uint8_t) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeIntForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [@(__success) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestTestByte_result class]]) {
    return NO;
  }
  ThriftTestTestByte_result *other = (ThriftTestTestByte_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && (__success != other->__success))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (uint8_t) success {
  return __success;
}

- (void) setSuccess: (uint8_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TestByte_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BYTE fieldID: 0];
    [outProtocol writeByte: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestTestByte_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTesttestI32_args : NSObject <TBase, NSCoding> {
  int32_t __thing;

  BOOL __thing_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=thing, setter=setThing:) int32_t thing;
#endif

- (id) init;
- (id) initWithThing: (int32_t) thing;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) thing;
- (void) setThing: (int32_t) thing;
#endif
- (BOOL) thingIsSet;

@end

@implementation ThriftTesttestI32_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithThing: (int32_t) thing
{
  self = [super init];
  __thing = thing;
  __thing_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"thing"])
  {
    __thing = [decoder decodeInt32ForKey: @"thing"];
    __thing_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__thing_isset)
  {
    [encoder encodeInt32: __thing forKey: @"thing"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __thing_isset ? 2654435761 : 0;
  if (__thing_isset)
  {
    hash = (hash * 31) ^ [@(__thing) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTesttestI32_args class]]) {
    return NO;
  }
  ThriftTesttestI32_args *other = (ThriftTesttestI32_args *)anObject;
  if ((__thing_isset != other->__thing_isset) ||
      (__thing_isset && (__thing != other->__thing))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) thing {
  return __thing;
}

- (void) setThing: (int32_t) thing {
  __thing = thing;
  __thing_isset = YES;
}

- (BOOL) thingIsSet {
  return __thing_isset;
}

- (void) unsetThing {
  __thing_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setThing: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"testI32_args"];
  if (__thing_isset) {
    [outProtocol writeFieldBeginWithName: @"thing" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __thing];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTesttestI32_args("];
  [ms appendString: @"thing:"];
  [ms appendFormat: @"%i", __thing];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTestTestI32_result : NSObject <TBase, NSCoding> {
  int32_t __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) int32_t success;
#endif

- (id) init;
- (id) initWithSuccess: (int32_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) success;
- (void) setSuccess: (int32_t) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ThriftTestTestI32_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (int32_t) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeInt32ForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt32: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [@(__success) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestTestI32_result class]]) {
    return NO;
  }
  ThriftTestTestI32_result *other = (ThriftTestTestI32_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && (__success != other->__success))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) success {
  return __success;
}

- (void) setSuccess: (int32_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TestI32_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_I32 fieldID: 0];
    [outProtocol writeI32: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestTestI32_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTesttestI64_args : NSObject <TBase, NSCoding> {
  int64_t __thing;

  BOOL __thing_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=thing, setter=setThing:) int64_t thing;
#endif

- (id) init;
- (id) initWithThing: (int64_t) thing;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int64_t) thing;
- (void) setThing: (int64_t) thing;
#endif
- (BOOL) thingIsSet;

@end

@implementation ThriftTesttestI64_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithThing: (int64_t) thing
{
  self = [super init];
  __thing = thing;
  __thing_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"thing"])
  {
    __thing = [decoder decodeInt64ForKey: @"thing"];
    __thing_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__thing_isset)
  {
    [encoder encodeInt64: __thing forKey: @"thing"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __thing_isset ? 2654435761 : 0;
  if (__thing_isset)
  {
    hash = (hash * 31) ^ [@(__thing) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTesttestI64_args class]]) {
    return NO;
  }
  ThriftTesttestI64_args *other = (ThriftTesttestI64_args *)anObject;
  if ((__thing_isset != other->__thing_isset) ||
      (__thing_isset && (__thing != other->__thing))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int64_t) thing {
  return __thing;
}

- (void) setThing: (int64_t) thing {
  __thing = thing;
  __thing_isset = YES;
}

- (BOOL) thingIsSet {
  return __thing_isset;
}

- (void) unsetThing {
  __thing_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setThing: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"testI64_args"];
  if (__thing_isset) {
    [outProtocol writeFieldBeginWithName: @"thing" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __thing];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTesttestI64_args("];
  [ms appendString: @"thing:"];
  [ms appendFormat: @"%qi", __thing];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTestTestI64_result : NSObject <TBase, NSCoding> {
  int64_t __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) int64_t success;
#endif

- (id) init;
- (id) initWithSuccess: (int64_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int64_t) success;
- (void) setSuccess: (int64_t) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ThriftTestTestI64_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (int64_t) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeInt64ForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt64: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [@(__success) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestTestI64_result class]]) {
    return NO;
  }
  ThriftTestTestI64_result *other = (ThriftTestTestI64_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && (__success != other->__success))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int64_t) success {
  return __success;
}

- (void) setSuccess: (int64_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TestI64_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_I64 fieldID: 0];
    [outProtocol writeI64: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestTestI64_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%qi", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTesttestDouble_args : NSObject <TBase, NSCoding> {
  double __thing;

  BOOL __thing_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=thing, setter=setThing:) double thing;
#endif

- (id) init;
- (id) initWithThing: (double) thing;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (double) thing;
- (void) setThing: (double) thing;
#endif
- (BOOL) thingIsSet;

@end

@implementation ThriftTesttestDouble_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithThing: (double) thing
{
  self = [super init];
  __thing = thing;
  __thing_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"thing"])
  {
    __thing = [decoder decodeDoubleForKey: @"thing"];
    __thing_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__thing_isset)
  {
    [encoder encodeDouble: __thing forKey: @"thing"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __thing_isset ? 2654435761 : 0;
  if (__thing_isset)
  {
    hash = (hash * 31) ^ [@(__thing) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTesttestDouble_args class]]) {
    return NO;
  }
  ThriftTesttestDouble_args *other = (ThriftTesttestDouble_args *)anObject;
  if ((__thing_isset != other->__thing_isset) ||
      (__thing_isset && (__thing != other->__thing))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (double) thing {
  return __thing;
}

- (void) setThing: (double) thing {
  __thing = thing;
  __thing_isset = YES;
}

- (BOOL) thingIsSet {
  return __thing_isset;
}

- (void) unsetThing {
  __thing_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setThing: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"testDouble_args"];
  if (__thing_isset) {
    [outProtocol writeFieldBeginWithName: @"thing" type: TType_DOUBLE fieldID: 1];
    [outProtocol writeDouble: __thing];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTesttestDouble_args("];
  [ms appendString: @"thing:"];
  [ms appendFormat: @"%f", __thing];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTestTestDouble_result : NSObject <TBase, NSCoding> {
  double __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) double success;
#endif

- (id) init;
- (id) initWithSuccess: (double) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (double) success;
- (void) setSuccess: (double) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ThriftTestTestDouble_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (double) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeDoubleForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeDouble: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [@(__success) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestTestDouble_result class]]) {
    return NO;
  }
  ThriftTestTestDouble_result *other = (ThriftTestTestDouble_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && (__success != other->__success))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (double) success {
  return __success;
}

- (void) setSuccess: (double) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TestDouble_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_DOUBLE fieldID: 0];
    [outProtocol writeDouble: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestTestDouble_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%f", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTesttestBinary_args : NSObject <TBase, NSCoding> {
  NSData * __thing;

  BOOL __thing_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=thing, setter=setThing:) NSData * thing;
#endif

- (id) init;
- (id) initWithThing: (NSData *) thing;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSData *) thing;
- (void) setThing: (NSData *) thing;
#endif
- (BOOL) thingIsSet;

@end

@implementation ThriftTesttestBinary_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithThing: (NSData *) thing
{
  self = [super init];
  __thing = [thing retain_stub];
  __thing_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"thing"])
  {
    __thing = [[decoder decodeObjectForKey: @"thing"] retain_stub];
    __thing_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__thing_isset)
  {
    [encoder encodeObject: __thing forKey: @"thing"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __thing_isset ? 2654435761 : 0;
  if (__thing_isset)
  {
    hash = (hash * 31) ^ [__thing hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTesttestBinary_args class]]) {
    return NO;
  }
  ThriftTesttestBinary_args *other = (ThriftTesttestBinary_args *)anObject;
  if ((__thing_isset != other->__thing_isset) ||
      (__thing_isset && ((__thing || other->__thing) && ![__thing isEqual:other->__thing]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__thing release_stub];
  [super dealloc_stub];
}

- (NSData *) thing {
  return [[__thing retain_stub] autorelease_stub];
}

- (void) setThing: (NSData *) thing {
  [thing retain_stub];
  [__thing release_stub];
  __thing = thing;
  __thing_isset = YES;
}

- (BOOL) thingIsSet {
  return __thing_isset;
}

- (void) unsetThing {
  [__thing release_stub];
  __thing = nil;
  __thing_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setThing: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"testBinary_args"];
  if (__thing_isset) {
    if (__thing != nil) {
      [outProtocol writeFieldBeginWithName: @"thing" type: TType_STRING fieldID: 1];
      [outProtocol writeBinary: __thing];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTesttestBinary_args("];
  [ms appendString: @"thing:"];
  [ms appendFormat: @"\"%@\"", __thing];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTestTestBinary_result : NSObject <TBase, NSCoding> {
  NSData * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSData * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSData *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSData *) success;
- (void) setSuccess: (NSData *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ThriftTestTestBinary_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSData *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestTestBinary_result class]]) {
    return NO;
  }
  ThriftTestTestBinary_result *other = (ThriftTestTestBinary_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSData *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSData *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TestBinary_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeBinary: __success];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestTestBinary_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTesttestStruct_args : NSObject <TBase, NSCoding> {
  ThriftTestXtruct * __thing;

  BOOL __thing_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=thing, setter=setThing:) ThriftTestXtruct * thing;
#endif

- (id) init;
- (id) initWithThing: (ThriftTestXtruct *) thing;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ThriftTestXtruct *) thing;
- (void) setThing: (ThriftTestXtruct *) thing;
#endif
- (BOOL) thingIsSet;

@end

@implementation ThriftTesttestStruct_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithThing: (ThriftTestXtruct *) thing
{
  self = [super init];
  __thing = [thing retain_stub];
  __thing_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"thing"])
  {
    __thing = [[decoder decodeObjectForKey: @"thing"] retain_stub];
    __thing_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__thing_isset)
  {
    [encoder encodeObject: __thing forKey: @"thing"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __thing_isset ? 2654435761 : 0;
  if (__thing_isset)
  {
    hash = (hash * 31) ^ [__thing hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTesttestStruct_args class]]) {
    return NO;
  }
  ThriftTesttestStruct_args *other = (ThriftTesttestStruct_args *)anObject;
  if ((__thing_isset != other->__thing_isset) ||
      (__thing_isset && ((__thing || other->__thing) && ![__thing isEqual:other->__thing]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__thing release_stub];
  [super dealloc_stub];
}

- (ThriftTestXtruct *) thing {
  return [[__thing retain_stub] autorelease_stub];
}

- (void) setThing: (ThriftTestXtruct *) thing {
  [thing retain_stub];
  [__thing release_stub];
  __thing = thing;
  __thing_isset = YES;
}

- (BOOL) thingIsSet {
  return __thing_isset;
}

- (void) unsetThing {
  [__thing release_stub];
  __thing = nil;
  __thing_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ThriftTestXtruct *fieldValue = [[ThriftTestXtruct alloc] init];
          [fieldValue read: inProtocol];
          [self setThing: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"testStruct_args"];
  if (__thing_isset) {
    if (__thing != nil) {
      [outProtocol writeFieldBeginWithName: @"thing" type: TType_STRUCT fieldID: 1];
      [__thing write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTesttestStruct_args("];
  [ms appendString: @"thing:"];
  [ms appendFormat: @"%@", __thing];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTestTestStruct_result : NSObject <TBase, NSCoding> {
  ThriftTestXtruct * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ThriftTestXtruct * success;
#endif

- (id) init;
- (id) initWithSuccess: (ThriftTestXtruct *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ThriftTestXtruct *) success;
- (void) setSuccess: (ThriftTestXtruct *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ThriftTestTestStruct_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ThriftTestXtruct *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestTestStruct_result class]]) {
    return NO;
  }
  ThriftTestTestStruct_result *other = (ThriftTestTestStruct_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (ThriftTestXtruct *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ThriftTestXtruct *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ThriftTestXtruct *fieldValue = [[ThriftTestXtruct alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TestStruct_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestTestStruct_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTesttestNest_args : NSObject <TBase, NSCoding> {
  ThriftTestXtruct2 * __thing;

  BOOL __thing_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=thing, setter=setThing:) ThriftTestXtruct2 * thing;
#endif

- (id) init;
- (id) initWithThing: (ThriftTestXtruct2 *) thing;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ThriftTestXtruct2 *) thing;
- (void) setThing: (ThriftTestXtruct2 *) thing;
#endif
- (BOOL) thingIsSet;

@end

@implementation ThriftTesttestNest_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithThing: (ThriftTestXtruct2 *) thing
{
  self = [super init];
  __thing = [thing retain_stub];
  __thing_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"thing"])
  {
    __thing = [[decoder decodeObjectForKey: @"thing"] retain_stub];
    __thing_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__thing_isset)
  {
    [encoder encodeObject: __thing forKey: @"thing"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __thing_isset ? 2654435761 : 0;
  if (__thing_isset)
  {
    hash = (hash * 31) ^ [__thing hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTesttestNest_args class]]) {
    return NO;
  }
  ThriftTesttestNest_args *other = (ThriftTesttestNest_args *)anObject;
  if ((__thing_isset != other->__thing_isset) ||
      (__thing_isset && ((__thing || other->__thing) && ![__thing isEqual:other->__thing]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__thing release_stub];
  [super dealloc_stub];
}

- (ThriftTestXtruct2 *) thing {
  return [[__thing retain_stub] autorelease_stub];
}

- (void) setThing: (ThriftTestXtruct2 *) thing {
  [thing retain_stub];
  [__thing release_stub];
  __thing = thing;
  __thing_isset = YES;
}

- (BOOL) thingIsSet {
  return __thing_isset;
}

- (void) unsetThing {
  [__thing release_stub];
  __thing = nil;
  __thing_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ThriftTestXtruct2 *fieldValue = [[ThriftTestXtruct2 alloc] init];
          [fieldValue read: inProtocol];
          [self setThing: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"testNest_args"];
  if (__thing_isset) {
    if (__thing != nil) {
      [outProtocol writeFieldBeginWithName: @"thing" type: TType_STRUCT fieldID: 1];
      [__thing write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTesttestNest_args("];
  [ms appendString: @"thing:"];
  [ms appendFormat: @"%@", __thing];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTestTestNest_result : NSObject <TBase, NSCoding> {
  ThriftTestXtruct2 * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ThriftTestXtruct2 * success;
#endif

- (id) init;
- (id) initWithSuccess: (ThriftTestXtruct2 *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ThriftTestXtruct2 *) success;
- (void) setSuccess: (ThriftTestXtruct2 *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ThriftTestTestNest_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ThriftTestXtruct2 *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestTestNest_result class]]) {
    return NO;
  }
  ThriftTestTestNest_result *other = (ThriftTestTestNest_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (ThriftTestXtruct2 *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ThriftTestXtruct2 *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ThriftTestXtruct2 *fieldValue = [[ThriftTestXtruct2 alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TestNest_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestTestNest_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTesttestMap_args : NSObject <TBase, NSCoding> {
  NSMutableDictionary * __thing;

  BOOL __thing_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=thing, setter=setThing:) NSMutableDictionary * thing;
#endif

- (id) init;
- (id) initWithThing: (NSMutableDictionary *) thing;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableDictionary *) thing;
- (void) setThing: (NSMutableDictionary *) thing;
#endif
- (BOOL) thingIsSet;

@end

@implementation ThriftTesttestMap_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithThing: (NSMutableDictionary *) thing
{
  self = [super init];
  __thing = [thing retain_stub];
  __thing_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"thing"])
  {
    __thing = [[decoder decodeObjectForKey: @"thing"] retain_stub];
    __thing_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__thing_isset)
  {
    [encoder encodeObject: __thing forKey: @"thing"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __thing_isset ? 2654435761 : 0;
  if (__thing_isset)
  {
    hash = (hash * 31) ^ [__thing hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTesttestMap_args class]]) {
    return NO;
  }
  ThriftTesttestMap_args *other = (ThriftTesttestMap_args *)anObject;
  if ((__thing_isset != other->__thing_isset) ||
      (__thing_isset && ((__thing || other->__thing) && ![__thing isEqual:other->__thing]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__thing release_stub];
  [super dealloc_stub];
}

- (NSMutableDictionary *) thing {
  return [[__thing retain_stub] autorelease_stub];
}

- (void) setThing: (NSMutableDictionary *) thing {
  [thing retain_stub];
  [__thing release_stub];
  __thing = thing;
  __thing_isset = YES;
}

- (BOOL) thingIsSet {
  return __thing_isset;
}

- (void) unsetThing {
  [__thing release_stub];
  __thing = nil;
  __thing_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_MAP) {
          int _size178;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size178];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size178];
          int _i179;
          for (_i179 = 0; _i179 < _size178; ++_i179)
          {
            int32_t _key180 = [inProtocol readI32];
            int32_t _val181 = [inProtocol readI32];
            [fieldValue setObject: [NSNumber numberWithLong: _val181] forKey: [NSNumber numberWithLong: _key180]];
          }
          [inProtocol readMapEnd];
          [self setThing: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"testMap_args"];
  if (__thing_isset) {
    if (__thing != nil) {
      [outProtocol writeFieldBeginWithName: @"thing" type: TType_MAP fieldID: 1];
      {
        [outProtocol writeMapBeginWithKeyType: TType_I32 valueType: TType_I32 size: [__thing count]];
        NSEnumerator * _iter182 = [__thing keyEnumerator];
        id key183;
        while ((key183 = [_iter182 nextObject]))
        {
          [outProtocol writeI32: [key183 longValue]];
          [outProtocol writeI32: [[__thing objectForKey: key183] longValue]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTesttestMap_args("];
  [ms appendString: @"thing:"];
  [ms appendFormat: @"%@", __thing];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTestTestMap_result : NSObject <TBase, NSCoding> {
  NSMutableDictionary * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableDictionary * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableDictionary *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableDictionary *) success;
- (void) setSuccess: (NSMutableDictionary *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ThriftTestTestMap_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableDictionary *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestTestMap_result class]]) {
    return NO;
  }
  ThriftTestTestMap_result *other = (ThriftTestTestMap_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableDictionary *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableDictionary *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_MAP) {
          int _size184;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size184];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size184];
          int _i185;
          for (_i185 = 0; _i185 < _size184; ++_i185)
          {
            int32_t _key186 = [inProtocol readI32];
            int32_t _val187 = [inProtocol readI32];
            [fieldValue setObject: [NSNumber numberWithLong: _val187] forKey: [NSNumber numberWithLong: _key186]];
          }
          [inProtocol readMapEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TestMap_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_MAP fieldID: 0];
      {
        [outProtocol writeMapBeginWithKeyType: TType_I32 valueType: TType_I32 size: [__success count]];
        NSEnumerator * _iter188 = [__success keyEnumerator];
        id key189;
        while ((key189 = [_iter188 nextObject]))
        {
          [outProtocol writeI32: [key189 longValue]];
          [outProtocol writeI32: [[__success objectForKey: key189] longValue]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestTestMap_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTesttestStringMap_args : NSObject <TBase, NSCoding> {
  NSMutableDictionary * __thing;

  BOOL __thing_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=thing, setter=setThing:) NSMutableDictionary * thing;
#endif

- (id) init;
- (id) initWithThing: (NSMutableDictionary *) thing;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableDictionary *) thing;
- (void) setThing: (NSMutableDictionary *) thing;
#endif
- (BOOL) thingIsSet;

@end

@implementation ThriftTesttestStringMap_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithThing: (NSMutableDictionary *) thing
{
  self = [super init];
  __thing = [thing retain_stub];
  __thing_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"thing"])
  {
    __thing = [[decoder decodeObjectForKey: @"thing"] retain_stub];
    __thing_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__thing_isset)
  {
    [encoder encodeObject: __thing forKey: @"thing"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __thing_isset ? 2654435761 : 0;
  if (__thing_isset)
  {
    hash = (hash * 31) ^ [__thing hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTesttestStringMap_args class]]) {
    return NO;
  }
  ThriftTesttestStringMap_args *other = (ThriftTesttestStringMap_args *)anObject;
  if ((__thing_isset != other->__thing_isset) ||
      (__thing_isset && ((__thing || other->__thing) && ![__thing isEqual:other->__thing]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__thing release_stub];
  [super dealloc_stub];
}

- (NSMutableDictionary *) thing {
  return [[__thing retain_stub] autorelease_stub];
}

- (void) setThing: (NSMutableDictionary *) thing {
  [thing retain_stub];
  [__thing release_stub];
  __thing = thing;
  __thing_isset = YES;
}

- (BOOL) thingIsSet {
  return __thing_isset;
}

- (void) unsetThing {
  [__thing release_stub];
  __thing = nil;
  __thing_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_MAP) {
          int _size190;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size190];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size190];
          int _i191;
          for (_i191 = 0; _i191 < _size190; ++_i191)
          {
            NSString * _key192 = [inProtocol readString];
            NSString * _val193 = [inProtocol readString];
            [fieldValue setObject: _val193 forKey: _key192];
          }
          [inProtocol readMapEnd];
          [self setThing: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"testStringMap_args"];
  if (__thing_isset) {
    if (__thing != nil) {
      [outProtocol writeFieldBeginWithName: @"thing" type: TType_MAP fieldID: 1];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__thing count]];
        NSEnumerator * _iter194 = [__thing keyEnumerator];
        id key195;
        while ((key195 = [_iter194 nextObject]))
        {
          [outProtocol writeString: key195];
          [outProtocol writeString: [__thing objectForKey: key195]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTesttestStringMap_args("];
  [ms appendString: @"thing:"];
  [ms appendFormat: @"%@", __thing];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTestTestStringMap_result : NSObject <TBase, NSCoding> {
  NSMutableDictionary * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableDictionary * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableDictionary *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableDictionary *) success;
- (void) setSuccess: (NSMutableDictionary *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ThriftTestTestStringMap_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableDictionary *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestTestStringMap_result class]]) {
    return NO;
  }
  ThriftTestTestStringMap_result *other = (ThriftTestTestStringMap_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableDictionary *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableDictionary *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_MAP) {
          int _size196;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size196];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size196];
          int _i197;
          for (_i197 = 0; _i197 < _size196; ++_i197)
          {
            NSString * _key198 = [inProtocol readString];
            NSString * _val199 = [inProtocol readString];
            [fieldValue setObject: _val199 forKey: _key198];
          }
          [inProtocol readMapEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TestStringMap_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_MAP fieldID: 0];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__success count]];
        NSEnumerator * _iter200 = [__success keyEnumerator];
        id key201;
        while ((key201 = [_iter200 nextObject]))
        {
          [outProtocol writeString: key201];
          [outProtocol writeString: [__success objectForKey: key201]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestTestStringMap_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTesttestSet_args : NSObject <TBase, NSCoding> {
  NSMutableSet * __thing;

  BOOL __thing_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=thing, setter=setThing:) NSMutableSet * thing;
#endif

- (id) init;
- (id) initWithThing: (NSMutableSet *) thing;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableSet *) thing;
- (void) setThing: (NSMutableSet *) thing;
#endif
- (BOOL) thingIsSet;

@end

@implementation ThriftTesttestSet_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithThing: (NSMutableSet *) thing
{
  self = [super init];
  __thing = [thing retain_stub];
  __thing_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"thing"])
  {
    __thing = [[decoder decodeObjectForKey: @"thing"] retain_stub];
    __thing_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__thing_isset)
  {
    [encoder encodeObject: __thing forKey: @"thing"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __thing_isset ? 2654435761 : 0;
  if (__thing_isset)
  {
    hash = (hash * 31) ^ [__thing hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTesttestSet_args class]]) {
    return NO;
  }
  ThriftTesttestSet_args *other = (ThriftTesttestSet_args *)anObject;
  if ((__thing_isset != other->__thing_isset) ||
      (__thing_isset && ((__thing || other->__thing) && ![__thing isEqual:other->__thing]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__thing release_stub];
  [super dealloc_stub];
}

- (NSMutableSet *) thing {
  return [[__thing retain_stub] autorelease_stub];
}

- (void) setThing: (NSMutableSet *) thing {
  [thing retain_stub];
  [__thing release_stub];
  __thing = thing;
  __thing_isset = YES;
}

- (BOOL) thingIsSet {
  return __thing_isset;
}

- (void) unsetThing {
  [__thing release_stub];
  __thing = nil;
  __thing_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_SET) {
          int _size202;
          [inProtocol readSetBeginReturningElementType: NULL size: &_size202];
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size202];
          int _i203;
          for (_i203 = 0; _i203 < _size202; ++_i203)
          {
            int32_t _elem204 = [inProtocol readI32];
            [fieldValue addObject: [NSNumber numberWithLong: _elem204]];
          }
          [inProtocol readSetEnd];
          [self setThing: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"testSet_args"];
  if (__thing_isset) {
    if (__thing != nil) {
      [outProtocol writeFieldBeginWithName: @"thing" type: TType_SET fieldID: 1];
      {
        [outProtocol writeSetBeginWithElementType: TType_I32 size: [__thing count]];
        NSEnumerator * _iter205 = [__thing objectEnumerator];
        id obj206;
        while ((obj206 = [_iter205 nextObject]))
        {
          [outProtocol writeI32: [obj206 longValue]];
        }
        [outProtocol writeSetEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTesttestSet_args("];
  [ms appendString: @"thing:"];
  [ms appendFormat: @"%@", __thing];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTestTestSet_result : NSObject <TBase, NSCoding> {
  NSMutableSet * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableSet * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableSet *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableSet *) success;
- (void) setSuccess: (NSMutableSet *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ThriftTestTestSet_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableSet *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestTestSet_result class]]) {
    return NO;
  }
  ThriftTestTestSet_result *other = (ThriftTestTestSet_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableSet *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableSet *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_SET) {
          int _size207;
          [inProtocol readSetBeginReturningElementType: NULL size: &_size207];
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size207];
          int _i208;
          for (_i208 = 0; _i208 < _size207; ++_i208)
          {
            int32_t _elem209 = [inProtocol readI32];
            [fieldValue addObject: [NSNumber numberWithLong: _elem209]];
          }
          [inProtocol readSetEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TestSet_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_SET fieldID: 0];
      {
        [outProtocol writeSetBeginWithElementType: TType_I32 size: [__success count]];
        NSEnumerator * _iter210 = [__success objectEnumerator];
        id obj211;
        while ((obj211 = [_iter210 nextObject]))
        {
          [outProtocol writeI32: [obj211 longValue]];
        }
        [outProtocol writeSetEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestTestSet_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTesttestList_args : NSObject <TBase, NSCoding> {
  NSMutableArray * __thing;

  BOOL __thing_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=thing, setter=setThing:) NSMutableArray * thing;
#endif

- (id) init;
- (id) initWithThing: (NSMutableArray *) thing;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) thing;
- (void) setThing: (NSMutableArray *) thing;
#endif
- (BOOL) thingIsSet;

@end

@implementation ThriftTesttestList_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithThing: (NSMutableArray *) thing
{
  self = [super init];
  __thing = [thing retain_stub];
  __thing_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"thing"])
  {
    __thing = [[decoder decodeObjectForKey: @"thing"] retain_stub];
    __thing_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__thing_isset)
  {
    [encoder encodeObject: __thing forKey: @"thing"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __thing_isset ? 2654435761 : 0;
  if (__thing_isset)
  {
    hash = (hash * 31) ^ [__thing hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTesttestList_args class]]) {
    return NO;
  }
  ThriftTesttestList_args *other = (ThriftTesttestList_args *)anObject;
  if ((__thing_isset != other->__thing_isset) ||
      (__thing_isset && ((__thing || other->__thing) && ![__thing isEqual:other->__thing]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__thing release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) thing {
  return [[__thing retain_stub] autorelease_stub];
}

- (void) setThing: (NSMutableArray *) thing {
  [thing retain_stub];
  [__thing release_stub];
  __thing = thing;
  __thing_isset = YES;
}

- (BOOL) thingIsSet {
  return __thing_isset;
}

- (void) unsetThing {
  [__thing release_stub];
  __thing = nil;
  __thing_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size212;
          [inProtocol readListBeginReturningElementType: NULL size: &_size212];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size212];
          int _i213;
          for (_i213 = 0; _i213 < _size212; ++_i213)
          {
            int32_t _elem214 = [inProtocol readI32];
            [fieldValue addObject: [NSNumber numberWithLong: _elem214]];
          }
          [inProtocol readListEnd];
          [self setThing: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"testList_args"];
  if (__thing_isset) {
    if (__thing != nil) {
      [outProtocol writeFieldBeginWithName: @"thing" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_I32 size: [__thing count]];
        int idx216;
        for (idx216 = 0; idx216 < [__thing count]; idx216++)
        {
          [outProtocol writeI32: [[__thing objectAtIndex: idx216] longValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTesttestList_args("];
  [ms appendString: @"thing:"];
  [ms appendFormat: @"%@", __thing];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTestTestList_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ThriftTestTestList_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestTestList_result class]]) {
    return NO;
  }
  ThriftTestTestList_result *other = (ThriftTestTestList_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size217;
          [inProtocol readListBeginReturningElementType: NULL size: &_size217];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size217];
          int _i218;
          for (_i218 = 0; _i218 < _size217; ++_i218)
          {
            int32_t _elem219 = [inProtocol readI32];
            [fieldValue addObject: [NSNumber numberWithLong: _elem219]];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TestList_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_I32 size: [__success count]];
        int idx221;
        for (idx221 = 0; idx221 < [__success count]; idx221++)
        {
          [outProtocol writeI32: [[__success objectAtIndex: idx221] longValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestTestList_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTesttestEnum_args : NSObject <TBase, NSCoding> {
  int __thing;

  BOOL __thing_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=thing, setter=setThing:) int thing;
#endif

- (id) init;
- (id) initWithThing: (int) thing;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int) thing;
- (void) setThing: (int) thing;
#endif
- (BOOL) thingIsSet;

@end

@implementation ThriftTesttestEnum_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithThing: (int) thing
{
  self = [super init];
  __thing = thing;
  __thing_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"thing"])
  {
    __thing = [decoder decodeIntForKey: @"thing"];
    __thing_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__thing_isset)
  {
    [encoder encodeInt: __thing forKey: @"thing"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __thing_isset ? 2654435761 : 0;
  if (__thing_isset)
  {
    hash = (hash * 31) ^ [@(__thing) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTesttestEnum_args class]]) {
    return NO;
  }
  ThriftTesttestEnum_args *other = (ThriftTesttestEnum_args *)anObject;
  if ((__thing_isset != other->__thing_isset) ||
      (__thing_isset && (__thing != other->__thing))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int) thing {
  return __thing;
}

- (void) setThing: (int) thing {
  __thing = thing;
  __thing_isset = YES;
}

- (BOOL) thingIsSet {
  return __thing_isset;
}

- (void) unsetThing {
  __thing_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setThing: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"testEnum_args"];
  if (__thing_isset) {
    [outProtocol writeFieldBeginWithName: @"thing" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __thing];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTesttestEnum_args("];
  [ms appendString: @"thing:"];
  [ms appendFormat: @"%i", __thing];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTestTestEnum_result : NSObject <TBase, NSCoding> {
  int __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) int success;
#endif

- (id) init;
- (id) initWithSuccess: (int) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int) success;
- (void) setSuccess: (int) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ThriftTestTestEnum_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (int) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeIntForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [@(__success) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestTestEnum_result class]]) {
    return NO;
  }
  ThriftTestTestEnum_result *other = (ThriftTestTestEnum_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && (__success != other->__success))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int) success {
  return __success;
}

- (void) setSuccess: (int) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TestEnum_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_I32 fieldID: 0];
    [outProtocol writeI32: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestTestEnum_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTesttestTypedef_args : NSObject <TBase, NSCoding> {
  ThriftTestUserId __thing;

  BOOL __thing_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=thing, setter=setThing:) ThriftTestUserId thing;
#endif

- (id) init;
- (id) initWithThing: (ThriftTestUserId) thing;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ThriftTestUserId) thing;
- (void) setThing: (ThriftTestUserId) thing;
#endif
- (BOOL) thingIsSet;

@end

@implementation ThriftTesttestTypedef_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithThing: (ThriftTestUserId) thing
{
  self = [super init];
  __thing = thing;
  __thing_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"thing"])
  {
    __thing = [decoder decodeInt64ForKey: @"thing"];
    __thing_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__thing_isset)
  {
    [encoder encodeInt64: __thing forKey: @"thing"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __thing_isset ? 2654435761 : 0;
  if (__thing_isset)
  {
    hash = (hash * 31) ^ [@(__thing) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTesttestTypedef_args class]]) {
    return NO;
  }
  ThriftTesttestTypedef_args *other = (ThriftTesttestTypedef_args *)anObject;
  if ((__thing_isset != other->__thing_isset) ||
      (__thing_isset && (__thing != other->__thing))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int64_t) thing {
  return __thing;
}

- (void) setThing: (int64_t) thing {
  __thing = thing;
  __thing_isset = YES;
}

- (BOOL) thingIsSet {
  return __thing_isset;
}

- (void) unsetThing {
  __thing_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setThing: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"testTypedef_args"];
  if (__thing_isset) {
    [outProtocol writeFieldBeginWithName: @"thing" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __thing];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTesttestTypedef_args("];
  [ms appendString: @"thing:"];
  [ms appendFormat: @"%qi", __thing];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTestTestTypedef_result : NSObject <TBase, NSCoding> {
  ThriftTestUserId __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) ThriftTestUserId success;
#endif

- (id) init;
- (id) initWithSuccess: (ThriftTestUserId) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ThriftTestUserId) success;
- (void) setSuccess: (ThriftTestUserId) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ThriftTestTestTypedef_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ThriftTestUserId) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeInt64ForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt64: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [@(__success) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestTestTypedef_result class]]) {
    return NO;
  }
  ThriftTestTestTypedef_result *other = (ThriftTestTestTypedef_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && (__success != other->__success))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int64_t) success {
  return __success;
}

- (void) setSuccess: (int64_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TestTypedef_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_I64 fieldID: 0];
    [outProtocol writeI64: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestTestTypedef_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%qi", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTesttestMapMap_args : NSObject <TBase, NSCoding> {
  int32_t __hello;

  BOOL __hello_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=hello, setter=setHello:) int32_t hello;
#endif

- (id) init;
- (id) initWithHello: (int32_t) hello;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) hello;
- (void) setHello: (int32_t) hello;
#endif
- (BOOL) helloIsSet;

@end

@implementation ThriftTesttestMapMap_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHello: (int32_t) hello
{
  self = [super init];
  __hello = hello;
  __hello_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"hello"])
  {
    __hello = [decoder decodeInt32ForKey: @"hello"];
    __hello_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__hello_isset)
  {
    [encoder encodeInt32: __hello forKey: @"hello"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __hello_isset ? 2654435761 : 0;
  if (__hello_isset)
  {
    hash = (hash * 31) ^ [@(__hello) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTesttestMapMap_args class]]) {
    return NO;
  }
  ThriftTesttestMapMap_args *other = (ThriftTesttestMapMap_args *)anObject;
  if ((__hello_isset != other->__hello_isset) ||
      (__hello_isset && (__hello != other->__hello))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) hello {
  return __hello;
}

- (void) setHello: (int32_t) hello {
  __hello = hello;
  __hello_isset = YES;
}

- (BOOL) helloIsSet {
  return __hello_isset;
}

- (void) unsetHello {
  __hello_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHello: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"testMapMap_args"];
  if (__hello_isset) {
    [outProtocol writeFieldBeginWithName: @"hello" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __hello];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTesttestMapMap_args("];
  [ms appendString: @"hello:"];
  [ms appendFormat: @"%i", __hello];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTestTestMapMap_result : NSObject <TBase, NSCoding> {
  NSMutableDictionary * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableDictionary * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableDictionary *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableDictionary *) success;
- (void) setSuccess: (NSMutableDictionary *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ThriftTestTestMapMap_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableDictionary *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestTestMapMap_result class]]) {
    return NO;
  }
  ThriftTestTestMapMap_result *other = (ThriftTestTestMapMap_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableDictionary *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableDictionary *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_MAP) {
          int _size222;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size222];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size222];
          int _i223;
          for (_i223 = 0; _i223 < _size222; ++_i223)
          {
            int32_t _key224 = [inProtocol readI32];
            int _size226;
            [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size226];
            NSMutableDictionary * _val225 = [[NSMutableDictionary alloc] initWithCapacity: _size226];
            int _i227;
            for (_i227 = 0; _i227 < _size226; ++_i227)
            {
              int32_t _key228 = [inProtocol readI32];
              int32_t _val229 = [inProtocol readI32];
              [_val225 setObject: [NSNumber numberWithLong: _val229] forKey: [NSNumber numberWithLong: _key228]];
            }
            [inProtocol readMapEnd];
            [fieldValue setObject: _val225 forKey: [NSNumber numberWithLong: _key224]];
            [_val225 release_stub];
          }
          [inProtocol readMapEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TestMapMap_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_MAP fieldID: 0];
      {
        [outProtocol writeMapBeginWithKeyType: TType_I32 valueType: TType_MAP size: [__success count]];
        NSEnumerator * _iter230 = [__success keyEnumerator];
        id key231;
        while ((key231 = [_iter230 nextObject]))
        {
          [outProtocol writeI32: [key231 longValue]];
          {
            [outProtocol writeMapBeginWithKeyType: TType_I32 valueType: TType_I32 size: [[__success objectForKey: key231] count]];
            NSEnumerator * _iter232 = [[__success objectForKey: key231] keyEnumerator];
            id key233;
            while ((key233 = [_iter232 nextObject]))
            {
              [outProtocol writeI32: [key233 longValue]];
              [outProtocol writeI32: [[[__success objectForKey: key231] objectForKey: key233] longValue]];
            }
            [outProtocol writeMapEnd];
          }
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestTestMapMap_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTesttestInsanity_args : NSObject <TBase, NSCoding> {
  ThriftTestInsanity * __argument;

  BOOL __argument_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=argument, setter=setArgument:) ThriftTestInsanity * argument;
#endif

- (id) init;
- (id) initWithArgument: (ThriftTestInsanity *) argument;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ThriftTestInsanity *) argument;
- (void) setArgument: (ThriftTestInsanity *) argument;
#endif
- (BOOL) argumentIsSet;

@end

@implementation ThriftTesttestInsanity_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithArgument: (ThriftTestInsanity *) argument
{
  self = [super init];
  __argument = [argument retain_stub];
  __argument_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"argument"])
  {
    __argument = [[decoder decodeObjectForKey: @"argument"] retain_stub];
    __argument_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__argument_isset)
  {
    [encoder encodeObject: __argument forKey: @"argument"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __argument_isset ? 2654435761 : 0;
  if (__argument_isset)
  {
    hash = (hash * 31) ^ [__argument hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTesttestInsanity_args class]]) {
    return NO;
  }
  ThriftTesttestInsanity_args *other = (ThriftTesttestInsanity_args *)anObject;
  if ((__argument_isset != other->__argument_isset) ||
      (__argument_isset && ((__argument || other->__argument) && ![__argument isEqual:other->__argument]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__argument release_stub];
  [super dealloc_stub];
}

- (ThriftTestInsanity *) argument {
  return [[__argument retain_stub] autorelease_stub];
}

- (void) setArgument: (ThriftTestInsanity *) argument {
  [argument retain_stub];
  [__argument release_stub];
  __argument = argument;
  __argument_isset = YES;
}

- (BOOL) argumentIsSet {
  return __argument_isset;
}

- (void) unsetArgument {
  [__argument release_stub];
  __argument = nil;
  __argument_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ThriftTestInsanity *fieldValue = [[ThriftTestInsanity alloc] init];
          [fieldValue read: inProtocol];
          [self setArgument: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"testInsanity_args"];
  if (__argument_isset) {
    if (__argument != nil) {
      [outProtocol writeFieldBeginWithName: @"argument" type: TType_STRUCT fieldID: 1];
      [__argument write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTesttestInsanity_args("];
  [ms appendString: @"argument:"];
  [ms appendFormat: @"%@", __argument];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTestTestInsanity_result : NSObject <TBase, NSCoding> {
  NSMutableDictionary * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableDictionary * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableDictionary *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableDictionary *) success;
- (void) setSuccess: (NSMutableDictionary *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ThriftTestTestInsanity_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableDictionary *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestTestInsanity_result class]]) {
    return NO;
  }
  ThriftTestTestInsanity_result *other = (ThriftTestTestInsanity_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableDictionary *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableDictionary *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_MAP) {
          int _size234;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size234];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size234];
          int _i235;
          for (_i235 = 0; _i235 < _size234; ++_i235)
          {
            int64_t _key236 = [inProtocol readI64];
            int _size238;
            [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size238];
            NSMutableDictionary * _val237 = [[NSMutableDictionary alloc] initWithCapacity: _size238];
            int _i239;
            for (_i239 = 0; _i239 < _size238; ++_i239)
            {
              int _key240 = [inProtocol readI32];
              ThriftTestInsanity *_val241 = [[ThriftTestInsanity alloc] init];
              [_val241 read: inProtocol];
              [_val237 setObject: _val241 forKey: [NSNumber numberWithInt: _key240]];
              [_val241 release_stub];
            }
            [inProtocol readMapEnd];
            [fieldValue setObject: _val237 forKey: [NSNumber numberWithLongLong: _key236]];
            [_val237 release_stub];
          }
          [inProtocol readMapEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TestInsanity_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_MAP fieldID: 0];
      {
        [outProtocol writeMapBeginWithKeyType: TType_I64 valueType: TType_MAP size: [__success count]];
        NSEnumerator * _iter242 = [__success keyEnumerator];
        id key243;
        while ((key243 = [_iter242 nextObject]))
        {
          [outProtocol writeI64: [key243 longLongValue]];
          {
            [outProtocol writeMapBeginWithKeyType: TType_I32 valueType: TType_STRUCT size: [[__success objectForKey: key243] count]];
            NSEnumerator * _iter244 = [[__success objectForKey: key243] keyEnumerator];
            id key245;
            while ((key245 = [_iter244 nextObject]))
            {
              [outProtocol writeI32: [key245 intValue]];
              [[[__success objectForKey: key243] objectForKey: key245] write: outProtocol];
            }
            [outProtocol writeMapEnd];
          }
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestTestInsanity_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTesttestMulti_args : NSObject <TBase, NSCoding> {
  uint8_t __arg0;
  int32_t __arg1;
  int64_t __arg2;
  NSMutableDictionary * __arg3;
  int __arg4;
  ThriftTestUserId __arg5;

  BOOL __arg0_isset;
  BOOL __arg1_isset;
  BOOL __arg2_isset;
  BOOL __arg3_isset;
  BOOL __arg4_isset;
  BOOL __arg5_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=arg0, setter=setArg0:) uint8_t arg0;
@property (nonatomic, getter=arg1, setter=setArg1:) int32_t arg1;
@property (nonatomic, getter=arg2, setter=setArg2:) int64_t arg2;
@property (nonatomic, retain, getter=arg3, setter=setArg3:) NSMutableDictionary * arg3;
@property (nonatomic, getter=arg4, setter=setArg4:) int arg4;
@property (nonatomic, getter=arg5, setter=setArg5:) ThriftTestUserId arg5;
#endif

- (id) init;
- (id) initWithArg0: (uint8_t) arg0 arg1: (int32_t) arg1 arg2: (int64_t) arg2 arg3: (NSMutableDictionary *) arg3 arg4: (int) arg4 arg5: (ThriftTestUserId) arg5;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (uint8_t) arg0;
- (void) setArg0: (uint8_t) arg0;
#endif
- (BOOL) arg0IsSet;

#if !__has_feature(objc_arc)
- (int32_t) arg1;
- (void) setArg1: (int32_t) arg1;
#endif
- (BOOL) arg1IsSet;

#if !__has_feature(objc_arc)
- (int64_t) arg2;
- (void) setArg2: (int64_t) arg2;
#endif
- (BOOL) arg2IsSet;

#if !__has_feature(objc_arc)
- (NSMutableDictionary *) arg3;
- (void) setArg3: (NSMutableDictionary *) arg3;
#endif
- (BOOL) arg3IsSet;

#if !__has_feature(objc_arc)
- (int) arg4;
- (void) setArg4: (int) arg4;
#endif
- (BOOL) arg4IsSet;

#if !__has_feature(objc_arc)
- (ThriftTestUserId) arg5;
- (void) setArg5: (ThriftTestUserId) arg5;
#endif
- (BOOL) arg5IsSet;

@end

@implementation ThriftTesttestMulti_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithArg0: (uint8_t) arg0 arg1: (int32_t) arg1 arg2: (int64_t) arg2 arg3: (NSMutableDictionary *) arg3 arg4: (int) arg4 arg5: (ThriftTestUserId) arg5
{
  self = [super init];
  __arg0 = arg0;
  __arg0_isset = YES;
  __arg1 = arg1;
  __arg1_isset = YES;
  __arg2 = arg2;
  __arg2_isset = YES;
  __arg3 = [arg3 retain_stub];
  __arg3_isset = YES;
  __arg4 = arg4;
  __arg4_isset = YES;
  __arg5 = arg5;
  __arg5_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"arg0"])
  {
    __arg0 = [decoder decodeIntForKey: @"arg0"];
    __arg0_isset = YES;
  }
  if ([decoder containsValueForKey: @"arg1"])
  {
    __arg1 = [decoder decodeInt32ForKey: @"arg1"];
    __arg1_isset = YES;
  }
  if ([decoder containsValueForKey: @"arg2"])
  {
    __arg2 = [decoder decodeInt64ForKey: @"arg2"];
    __arg2_isset = YES;
  }
  if ([decoder containsValueForKey: @"arg3"])
  {
    __arg3 = [[decoder decodeObjectForKey: @"arg3"] retain_stub];
    __arg3_isset = YES;
  }
  if ([decoder containsValueForKey: @"arg4"])
  {
    __arg4 = [decoder decodeIntForKey: @"arg4"];
    __arg4_isset = YES;
  }
  if ([decoder containsValueForKey: @"arg5"])
  {
    __arg5 = [decoder decodeInt64ForKey: @"arg5"];
    __arg5_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__arg0_isset)
  {
    [encoder encodeInt: __arg0 forKey: @"arg0"];
  }
  if (__arg1_isset)
  {
    [encoder encodeInt32: __arg1 forKey: @"arg1"];
  }
  if (__arg2_isset)
  {
    [encoder encodeInt64: __arg2 forKey: @"arg2"];
  }
  if (__arg3_isset)
  {
    [encoder encodeObject: __arg3 forKey: @"arg3"];
  }
  if (__arg4_isset)
  {
    [encoder encodeInt: __arg4 forKey: @"arg4"];
  }
  if (__arg5_isset)
  {
    [encoder encodeInt64: __arg5 forKey: @"arg5"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __arg0_isset ? 2654435761 : 0;
  if (__arg0_isset)
  {
    hash = (hash * 31) ^ [@(__arg0) hash];
  }
  hash = (hash * 31) ^ __arg1_isset ? 2654435761 : 0;
  if (__arg1_isset)
  {
    hash = (hash * 31) ^ [@(__arg1) hash];
  }
  hash = (hash * 31) ^ __arg2_isset ? 2654435761 : 0;
  if (__arg2_isset)
  {
    hash = (hash * 31) ^ [@(__arg2) hash];
  }
  hash = (hash * 31) ^ __arg3_isset ? 2654435761 : 0;
  if (__arg3_isset)
  {
    hash = (hash * 31) ^ [__arg3 hash];
  }
  hash = (hash * 31) ^ __arg4_isset ? 2654435761 : 0;
  if (__arg4_isset)
  {
    hash = (hash * 31) ^ [@(__arg4) hash];
  }
  hash = (hash * 31) ^ __arg5_isset ? 2654435761 : 0;
  if (__arg5_isset)
  {
    hash = (hash * 31) ^ [@(__arg5) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTesttestMulti_args class]]) {
    return NO;
  }
  ThriftTesttestMulti_args *other = (ThriftTesttestMulti_args *)anObject;
  if ((__arg0_isset != other->__arg0_isset) ||
      (__arg0_isset && (__arg0 != other->__arg0))) {
    return NO;
  }
  if ((__arg1_isset != other->__arg1_isset) ||
      (__arg1_isset && (__arg1 != other->__arg1))) {
    return NO;
  }
  if ((__arg2_isset != other->__arg2_isset) ||
      (__arg2_isset && (__arg2 != other->__arg2))) {
    return NO;
  }
  if ((__arg3_isset != other->__arg3_isset) ||
      (__arg3_isset && ((__arg3 || other->__arg3) && ![__arg3 isEqual:other->__arg3]))) {
    return NO;
  }
  if ((__arg4_isset != other->__arg4_isset) ||
      (__arg4_isset && (__arg4 != other->__arg4))) {
    return NO;
  }
  if ((__arg5_isset != other->__arg5_isset) ||
      (__arg5_isset && (__arg5 != other->__arg5))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__arg3 release_stub];
  [super dealloc_stub];
}

- (uint8_t) arg0 {
  return __arg0;
}

- (void) setArg0: (uint8_t) arg0 {
  __arg0 = arg0;
  __arg0_isset = YES;
}

- (BOOL) arg0IsSet {
  return __arg0_isset;
}

- (void) unsetArg0 {
  __arg0_isset = NO;
}

- (int32_t) arg1 {
  return __arg1;
}

- (void) setArg1: (int32_t) arg1 {
  __arg1 = arg1;
  __arg1_isset = YES;
}

- (BOOL) arg1IsSet {
  return __arg1_isset;
}

- (void) unsetArg1 {
  __arg1_isset = NO;
}

- (int64_t) arg2 {
  return __arg2;
}

- (void) setArg2: (int64_t) arg2 {
  __arg2 = arg2;
  __arg2_isset = YES;
}

- (BOOL) arg2IsSet {
  return __arg2_isset;
}

- (void) unsetArg2 {
  __arg2_isset = NO;
}

- (NSMutableDictionary *) arg3 {
  return [[__arg3 retain_stub] autorelease_stub];
}

- (void) setArg3: (NSMutableDictionary *) arg3 {
  [arg3 retain_stub];
  [__arg3 release_stub];
  __arg3 = arg3;
  __arg3_isset = YES;
}

- (BOOL) arg3IsSet {
  return __arg3_isset;
}

- (void) unsetArg3 {
  [__arg3 release_stub];
  __arg3 = nil;
  __arg3_isset = NO;
}

- (int) arg4 {
  return __arg4;
}

- (void) setArg4: (int) arg4 {
  __arg4 = arg4;
  __arg4_isset = YES;
}

- (BOOL) arg4IsSet {
  return __arg4_isset;
}

- (void) unsetArg4 {
  __arg4_isset = NO;
}

- (int64_t) arg5 {
  return __arg5;
}

- (void) setArg5: (int64_t) arg5 {
  __arg5 = arg5;
  __arg5_isset = YES;
}

- (BOOL) arg5IsSet {
  return __arg5_isset;
}

- (void) unsetArg5 {
  __arg5_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BYTE) {
          uint8_t fieldValue = [inProtocol readByte];
          [self setArg0: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setArg1: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setArg2: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_MAP) {
          int _size246;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size246];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size246];
          int _i247;
          for (_i247 = 0; _i247 < _size246; ++_i247)
          {
            int16_t _key248 = [inProtocol readI16];
            NSString * _val249 = [inProtocol readString];
            [fieldValue setObject: _val249 forKey: [NSNumber numberWithShort: _key248]];
          }
          [inProtocol readMapEnd];
          [self setArg3: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setArg4: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setArg5: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"testMulti_args"];
  if (__arg0_isset) {
    [outProtocol writeFieldBeginWithName: @"arg0" type: TType_BYTE fieldID: 1];
    [outProtocol writeByte: __arg0];
    [outProtocol writeFieldEnd];
  }
  if (__arg1_isset) {
    [outProtocol writeFieldBeginWithName: @"arg1" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __arg1];
    [outProtocol writeFieldEnd];
  }
  if (__arg2_isset) {
    [outProtocol writeFieldBeginWithName: @"arg2" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __arg2];
    [outProtocol writeFieldEnd];
  }
  if (__arg3_isset) {
    if (__arg3 != nil) {
      [outProtocol writeFieldBeginWithName: @"arg3" type: TType_MAP fieldID: 4];
      {
        [outProtocol writeMapBeginWithKeyType: TType_I16 valueType: TType_STRING size: [__arg3 count]];
        NSEnumerator * _iter250 = [__arg3 keyEnumerator];
        id key251;
        while ((key251 = [_iter250 nextObject]))
        {
          [outProtocol writeI16: [key251 shortValue]];
          [outProtocol writeString: [__arg3 objectForKey: key251]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__arg4_isset) {
    [outProtocol writeFieldBeginWithName: @"arg4" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __arg4];
    [outProtocol writeFieldEnd];
  }
  if (__arg5_isset) {
    [outProtocol writeFieldBeginWithName: @"arg5" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __arg5];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTesttestMulti_args("];
  [ms appendString: @"arg0:"];
  [ms appendFormat: @"%i", __arg0];
  [ms appendString: @",arg1:"];
  [ms appendFormat: @"%i", __arg1];
  [ms appendString: @",arg2:"];
  [ms appendFormat: @"%qi", __arg2];
  [ms appendString: @",arg3:"];
  [ms appendFormat: @"%@", __arg3];
  [ms appendString: @",arg4:"];
  [ms appendFormat: @"%i", __arg4];
  [ms appendString: @",arg5:"];
  [ms appendFormat: @"%qi", __arg5];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTestTestMulti_result : NSObject <TBase, NSCoding> {
  ThriftTestXtruct * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ThriftTestXtruct * success;
#endif

- (id) init;
- (id) initWithSuccess: (ThriftTestXtruct *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ThriftTestXtruct *) success;
- (void) setSuccess: (ThriftTestXtruct *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ThriftTestTestMulti_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ThriftTestXtruct *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestTestMulti_result class]]) {
    return NO;
  }
  ThriftTestTestMulti_result *other = (ThriftTestTestMulti_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (ThriftTestXtruct *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ThriftTestXtruct *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ThriftTestXtruct *fieldValue = [[ThriftTestXtruct alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TestMulti_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestTestMulti_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTesttestException_args : NSObject <TBase, NSCoding> {
  NSString * __arg;

  BOOL __arg_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=arg, setter=setArg:) NSString * arg;
#endif

- (id) init;
- (id) initWithArg: (NSString *) arg;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) arg;
- (void) setArg: (NSString *) arg;
#endif
- (BOOL) argIsSet;

@end

@implementation ThriftTesttestException_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithArg: (NSString *) arg
{
  self = [super init];
  __arg = [arg retain_stub];
  __arg_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"arg"])
  {
    __arg = [[decoder decodeObjectForKey: @"arg"] retain_stub];
    __arg_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__arg_isset)
  {
    [encoder encodeObject: __arg forKey: @"arg"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __arg_isset ? 2654435761 : 0;
  if (__arg_isset)
  {
    hash = (hash * 31) ^ [__arg hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTesttestException_args class]]) {
    return NO;
  }
  ThriftTesttestException_args *other = (ThriftTesttestException_args *)anObject;
  if ((__arg_isset != other->__arg_isset) ||
      (__arg_isset && ((__arg || other->__arg) && ![__arg isEqual:other->__arg]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__arg release_stub];
  [super dealloc_stub];
}

- (NSString *) arg {
  return [[__arg retain_stub] autorelease_stub];
}

- (void) setArg: (NSString *) arg {
  [arg retain_stub];
  [__arg release_stub];
  __arg = arg;
  __arg_isset = YES;
}

- (BOOL) argIsSet {
  return __arg_isset;
}

- (void) unsetArg {
  [__arg release_stub];
  __arg = nil;
  __arg_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setArg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"testException_args"];
  if (__arg_isset) {
    if (__arg != nil) {
      [outProtocol writeFieldBeginWithName: @"arg" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __arg];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTesttestException_args("];
  [ms appendString: @"arg:"];
  [ms appendFormat: @"\"%@\"", __arg];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTestTestException_result : NSObject <TBase, NSCoding> {
  ThriftTestXception * __err1;

  BOOL __err1_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=err1, setter=setErr1:) ThriftTestXception * err1;
#endif

- (id) init;
- (id) initWithErr1: (ThriftTestXception *) err1;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ThriftTestXception *) err1;
- (void) setErr1: (ThriftTestXception *) err1;
#endif
- (BOOL) err1IsSet;

@end

@implementation ThriftTestTestException_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithErr1: (ThriftTestXception *) err1
{
  self = [super init];
  __err1 = [err1 retain_stub];
  __err1_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"err1"])
  {
    __err1 = [[decoder decodeObjectForKey: @"err1"] retain_stub];
    __err1_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__err1_isset)
  {
    [encoder encodeObject: __err1 forKey: @"err1"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __err1_isset ? 2654435761 : 0;
  if (__err1_isset)
  {
    hash = (hash * 31) ^ [__err1 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestTestException_result class]]) {
    return NO;
  }
  ThriftTestTestException_result *other = (ThriftTestTestException_result *)anObject;
  if ((__err1_isset != other->__err1_isset) ||
      (__err1_isset && ((__err1 || other->__err1) && ![__err1 isEqual:other->__err1]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__err1 release_stub];
  [super dealloc_stub];
}

- (ThriftTestXception *) err1 {
  return [[__err1 retain_stub] autorelease_stub];
}

- (void) setErr1: (ThriftTestXception *) err1 {
  [err1 retain_stub];
  [__err1 release_stub];
  __err1 = err1;
  __err1_isset = YES;
}

- (BOOL) err1IsSet {
  return __err1_isset;
}

- (void) unsetErr1 {
  [__err1 release_stub];
  __err1 = nil;
  __err1_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ThriftTestXception *fieldValue = [[ThriftTestXception alloc] init];
          [fieldValue read: inProtocol];
          [self setErr1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TestException_result"];

  if (__err1_isset) {
    if (__err1 != nil) {
      [outProtocol writeFieldBeginWithName: @"err1" type: TType_STRUCT fieldID: 1];
      [__err1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestTestException_result("];
  [ms appendString: @"err1:"];
  [ms appendFormat: @"%@", __err1];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTesttestMultiException_args : NSObject <TBase, NSCoding> {
  NSString * __arg0;
  NSString * __arg1;

  BOOL __arg0_isset;
  BOOL __arg1_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=arg0, setter=setArg0:) NSString * arg0;
@property (nonatomic, retain, getter=arg1, setter=setArg1:) NSString * arg1;
#endif

- (id) init;
- (id) initWithArg0: (NSString *) arg0 arg1: (NSString *) arg1;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) arg0;
- (void) setArg0: (NSString *) arg0;
#endif
- (BOOL) arg0IsSet;

#if !__has_feature(objc_arc)
- (NSString *) arg1;
- (void) setArg1: (NSString *) arg1;
#endif
- (BOOL) arg1IsSet;

@end

@implementation ThriftTesttestMultiException_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithArg0: (NSString *) arg0 arg1: (NSString *) arg1
{
  self = [super init];
  __arg0 = [arg0 retain_stub];
  __arg0_isset = YES;
  __arg1 = [arg1 retain_stub];
  __arg1_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"arg0"])
  {
    __arg0 = [[decoder decodeObjectForKey: @"arg0"] retain_stub];
    __arg0_isset = YES;
  }
  if ([decoder containsValueForKey: @"arg1"])
  {
    __arg1 = [[decoder decodeObjectForKey: @"arg1"] retain_stub];
    __arg1_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__arg0_isset)
  {
    [encoder encodeObject: __arg0 forKey: @"arg0"];
  }
  if (__arg1_isset)
  {
    [encoder encodeObject: __arg1 forKey: @"arg1"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __arg0_isset ? 2654435761 : 0;
  if (__arg0_isset)
  {
    hash = (hash * 31) ^ [__arg0 hash];
  }
  hash = (hash * 31) ^ __arg1_isset ? 2654435761 : 0;
  if (__arg1_isset)
  {
    hash = (hash * 31) ^ [__arg1 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTesttestMultiException_args class]]) {
    return NO;
  }
  ThriftTesttestMultiException_args *other = (ThriftTesttestMultiException_args *)anObject;
  if ((__arg0_isset != other->__arg0_isset) ||
      (__arg0_isset && ((__arg0 || other->__arg0) && ![__arg0 isEqual:other->__arg0]))) {
    return NO;
  }
  if ((__arg1_isset != other->__arg1_isset) ||
      (__arg1_isset && ((__arg1 || other->__arg1) && ![__arg1 isEqual:other->__arg1]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__arg0 release_stub];
  [__arg1 release_stub];
  [super dealloc_stub];
}

- (NSString *) arg0 {
  return [[__arg0 retain_stub] autorelease_stub];
}

- (void) setArg0: (NSString *) arg0 {
  [arg0 retain_stub];
  [__arg0 release_stub];
  __arg0 = arg0;
  __arg0_isset = YES;
}

- (BOOL) arg0IsSet {
  return __arg0_isset;
}

- (void) unsetArg0 {
  [__arg0 release_stub];
  __arg0 = nil;
  __arg0_isset = NO;
}

- (NSString *) arg1 {
  return [[__arg1 retain_stub] autorelease_stub];
}

- (void) setArg1: (NSString *) arg1 {
  [arg1 retain_stub];
  [__arg1 release_stub];
  __arg1 = arg1;
  __arg1_isset = YES;
}

- (BOOL) arg1IsSet {
  return __arg1_isset;
}

- (void) unsetArg1 {
  [__arg1 release_stub];
  __arg1 = nil;
  __arg1_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setArg0: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setArg1: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"testMultiException_args"];
  if (__arg0_isset) {
    if (__arg0 != nil) {
      [outProtocol writeFieldBeginWithName: @"arg0" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __arg0];
      [outProtocol writeFieldEnd];
    }
  }
  if (__arg1_isset) {
    if (__arg1 != nil) {
      [outProtocol writeFieldBeginWithName: @"arg1" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __arg1];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTesttestMultiException_args("];
  [ms appendString: @"arg0:"];
  [ms appendFormat: @"\"%@\"", __arg0];
  [ms appendString: @",arg1:"];
  [ms appendFormat: @"\"%@\"", __arg1];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTestTestMultiException_result : NSObject <TBase, NSCoding> {
  ThriftTestXtruct * __success;
  ThriftTestXception * __err1;
  ThriftTestXception2 * __err2;

  BOOL __success_isset;
  BOOL __err1_isset;
  BOOL __err2_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ThriftTestXtruct * success;
@property (nonatomic, retain, getter=err1, setter=setErr1:) ThriftTestXception * err1;
@property (nonatomic, retain, getter=err2, setter=setErr2:) ThriftTestXception2 * err2;
#endif

- (id) init;
- (id) initWithSuccess: (ThriftTestXtruct *) success err1: (ThriftTestXception *) err1 err2: (ThriftTestXception2 *) err2;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ThriftTestXtruct *) success;
- (void) setSuccess: (ThriftTestXtruct *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ThriftTestXception *) err1;
- (void) setErr1: (ThriftTestXception *) err1;
#endif
- (BOOL) err1IsSet;

#if !__has_feature(objc_arc)
- (ThriftTestXception2 *) err2;
- (void) setErr2: (ThriftTestXception2 *) err2;
#endif
- (BOOL) err2IsSet;

@end

@implementation ThriftTestTestMultiException_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ThriftTestXtruct *) success err1: (ThriftTestXception *) err1 err2: (ThriftTestXception2 *) err2
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __err1 = [err1 retain_stub];
  __err1_isset = YES;
  __err2 = [err2 retain_stub];
  __err2_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"err1"])
  {
    __err1 = [[decoder decodeObjectForKey: @"err1"] retain_stub];
    __err1_isset = YES;
  }
  if ([decoder containsValueForKey: @"err2"])
  {
    __err2 = [[decoder decodeObjectForKey: @"err2"] retain_stub];
    __err2_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__err1_isset)
  {
    [encoder encodeObject: __err1 forKey: @"err1"];
  }
  if (__err2_isset)
  {
    [encoder encodeObject: __err2 forKey: @"err2"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  hash = (hash * 31) ^ __err1_isset ? 2654435761 : 0;
  if (__err1_isset)
  {
    hash = (hash * 31) ^ [__err1 hash];
  }
  hash = (hash * 31) ^ __err2_isset ? 2654435761 : 0;
  if (__err2_isset)
  {
    hash = (hash * 31) ^ [__err2 hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTestTestMultiException_result class]]) {
    return NO;
  }
  ThriftTestTestMultiException_result *other = (ThriftTestTestMultiException_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  if ((__err1_isset != other->__err1_isset) ||
      (__err1_isset && ((__err1 || other->__err1) && ![__err1 isEqual:other->__err1]))) {
    return NO;
  }
  if ((__err2_isset != other->__err2_isset) ||
      (__err2_isset && ((__err2 || other->__err2) && ![__err2 isEqual:other->__err2]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [__err1 release_stub];
  [__err2 release_stub];
  [super dealloc_stub];
}

- (ThriftTestXtruct *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ThriftTestXtruct *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ThriftTestXception *) err1 {
  return [[__err1 retain_stub] autorelease_stub];
}

- (void) setErr1: (ThriftTestXception *) err1 {
  [err1 retain_stub];
  [__err1 release_stub];
  __err1 = err1;
  __err1_isset = YES;
}

- (BOOL) err1IsSet {
  return __err1_isset;
}

- (void) unsetErr1 {
  [__err1 release_stub];
  __err1 = nil;
  __err1_isset = NO;
}

- (ThriftTestXception2 *) err2 {
  return [[__err2 retain_stub] autorelease_stub];
}

- (void) setErr2: (ThriftTestXception2 *) err2 {
  [err2 retain_stub];
  [__err2 release_stub];
  __err2 = err2;
  __err2_isset = YES;
}

- (BOOL) err2IsSet {
  return __err2_isset;
}

- (void) unsetErr2 {
  [__err2 release_stub];
  __err2 = nil;
  __err2_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ThriftTestXtruct *fieldValue = [[ThriftTestXtruct alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ThriftTestXception *fieldValue = [[ThriftTestXception alloc] init];
          [fieldValue read: inProtocol];
          [self setErr1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          ThriftTestXception2 *fieldValue = [[ThriftTestXception2 alloc] init];
          [fieldValue read: inProtocol];
          [self setErr2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TestMultiException_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__err1_isset) {
    if (__err1 != nil) {
      [outProtocol writeFieldBeginWithName: @"err1" type: TType_STRUCT fieldID: 1];
      [__err1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__err2_isset) {
    if (__err2 != nil) {
      [outProtocol writeFieldBeginWithName: @"err2" type: TType_STRUCT fieldID: 2];
      [__err2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestTestMultiException_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",err1:"];
  [ms appendFormat: @"%@", __err1];
  [ms appendString: @",err2:"];
  [ms appendFormat: @"%@", __err2];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ThriftTesttestOneway_args : NSObject <TBase, NSCoding> {
  int32_t __secondsToSleep;

  BOOL __secondsToSleep_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=secondsToSleep, setter=setSecondsToSleep:) int32_t secondsToSleep;
#endif

- (id) init;
- (id) initWithSecondsToSleep: (int32_t) secondsToSleep;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) secondsToSleep;
- (void) setSecondsToSleep: (int32_t) secondsToSleep;
#endif
- (BOOL) secondsToSleepIsSet;

@end

@implementation ThriftTesttestOneway_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSecondsToSleep: (int32_t) secondsToSleep
{
  self = [super init];
  __secondsToSleep = secondsToSleep;
  __secondsToSleep_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"secondsToSleep"])
  {
    __secondsToSleep = [decoder decodeInt32ForKey: @"secondsToSleep"];
    __secondsToSleep_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__secondsToSleep_isset)
  {
    [encoder encodeInt32: __secondsToSleep forKey: @"secondsToSleep"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __secondsToSleep_isset ? 2654435761 : 0;
  if (__secondsToSleep_isset)
  {
    hash = (hash * 31) ^ [@(__secondsToSleep) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ThriftTesttestOneway_args class]]) {
    return NO;
  }
  ThriftTesttestOneway_args *other = (ThriftTesttestOneway_args *)anObject;
  if ((__secondsToSleep_isset != other->__secondsToSleep_isset) ||
      (__secondsToSleep_isset && (__secondsToSleep != other->__secondsToSleep))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) secondsToSleep {
  return __secondsToSleep;
}

- (void) setSecondsToSleep: (int32_t) secondsToSleep {
  __secondsToSleep = secondsToSleep;
  __secondsToSleep_isset = YES;
}

- (BOOL) secondsToSleepIsSet {
  return __secondsToSleep_isset;
}

- (void) unsetSecondsToSleep {
  __secondsToSleep_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSecondsToSleep: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
  [self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"testOneway_args"];
  if (__secondsToSleep_isset) {
    [outProtocol writeFieldBeginWithName: @"secondsToSleep" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __secondsToSleep];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTesttestOneway_args("];
  [ms appendString: @"secondsToSleep:"];
  [ms appendFormat: @"%i", __secondsToSleep];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ThriftTestThriftTestClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_testVoid
{
  [outProtocol writeMessageBeginWithName: @"testVoid" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"testVoid_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_testVoid
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ThriftTestTestVoid_result * result = [[[ThriftTestTestVoid_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) testVoid
{
  [self send_testVoid];
  [self recv_testVoid];
}

- (void) send_testString: (NSString *) thing
{
  [outProtocol writeMessageBeginWithName: @"testString" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"testString_args"];
  if (thing != nil)  {
    [outProtocol writeFieldBeginWithName: @"thing" type: TType_STRING fieldID: 1];
    [outProtocol writeString: thing];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_testString
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ThriftTestTestString_result * result = [[[ThriftTestTestString_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"testString failed: unknown result"];
}

- (NSString *) testString: (NSString *) thing
{
  [self send_testString : thing];
  return [self recv_testString];
}

- (void) send_testByte: (uint8_t) thing
{
  [outProtocol writeMessageBeginWithName: @"testByte" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"testByte_args"];
  [outProtocol writeFieldBeginWithName: @"thing" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: thing];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (uint8_t) recv_testByte
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ThriftTestTestByte_result * result = [[[ThriftTestTestByte_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"testByte failed: unknown result"];
}

- (uint8_t) testByte: (uint8_t) thing
{
  [self send_testByte : thing];
  return [self recv_testByte];
}

- (void) send_testI32: (int32_t) thing
{
  [outProtocol writeMessageBeginWithName: @"testI32" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"testI32_args"];
  [outProtocol writeFieldBeginWithName: @"thing" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: thing];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (int32_t) recv_testI32
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ThriftTestTestI32_result * result = [[[ThriftTestTestI32_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"testI32 failed: unknown result"];
}

- (int32_t) testI32: (int32_t) thing
{
  [self send_testI32 : thing];
  return [self recv_testI32];
}

- (void) send_testI64: (int64_t) thing
{
  [outProtocol writeMessageBeginWithName: @"testI64" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"testI64_args"];
  [outProtocol writeFieldBeginWithName: @"thing" type: TType_I64 fieldID: 1];
  [outProtocol writeI64: thing];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (int64_t) recv_testI64
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ThriftTestTestI64_result * result = [[[ThriftTestTestI64_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"testI64 failed: unknown result"];
}

- (int64_t) testI64: (int64_t) thing
{
  [self send_testI64 : thing];
  return [self recv_testI64];
}

- (void) send_testDouble: (double) thing
{
  [outProtocol writeMessageBeginWithName: @"testDouble" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"testDouble_args"];
  [outProtocol writeFieldBeginWithName: @"thing" type: TType_DOUBLE fieldID: 1];
  [outProtocol writeDouble: thing];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (double) recv_testDouble
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ThriftTestTestDouble_result * result = [[[ThriftTestTestDouble_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"testDouble failed: unknown result"];
}

- (double) testDouble: (double) thing
{
  [self send_testDouble : thing];
  return [self recv_testDouble];
}

- (void) send_testBinary: (NSData *) thing
{
  [outProtocol writeMessageBeginWithName: @"testBinary" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"testBinary_args"];
  if (thing != nil)  {
    [outProtocol writeFieldBeginWithName: @"thing" type: TType_STRING fieldID: 1];
    [outProtocol writeBinary: thing];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSData *) recv_testBinary
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ThriftTestTestBinary_result * result = [[[ThriftTestTestBinary_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"testBinary failed: unknown result"];
}

- (NSData *) testBinary: (NSData *) thing
{
  [self send_testBinary : thing];
  return [self recv_testBinary];
}

- (void) send_testStruct: (ThriftTestXtruct *) thing
{
  [outProtocol writeMessageBeginWithName: @"testStruct" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"testStruct_args"];
  if (thing != nil)  {
    [outProtocol writeFieldBeginWithName: @"thing" type: TType_STRUCT fieldID: 1];
    [thing write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (ThriftTestXtruct *) recv_testStruct
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ThriftTestTestStruct_result * result = [[[ThriftTestTestStruct_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"testStruct failed: unknown result"];
}

- (ThriftTestXtruct *) testStruct: (ThriftTestXtruct *) thing
{
  [self send_testStruct : thing];
  return [self recv_testStruct];
}

- (void) send_testNest: (ThriftTestXtruct2 *) thing
{
  [outProtocol writeMessageBeginWithName: @"testNest" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"testNest_args"];
  if (thing != nil)  {
    [outProtocol writeFieldBeginWithName: @"thing" type: TType_STRUCT fieldID: 1];
    [thing write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (ThriftTestXtruct2 *) recv_testNest
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ThriftTestTestNest_result * result = [[[ThriftTestTestNest_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"testNest failed: unknown result"];
}

- (ThriftTestXtruct2 *) testNest: (ThriftTestXtruct2 *) thing
{
  [self send_testNest : thing];
  return [self recv_testNest];
}

- (void) send_testMap: (NSMutableDictionary *) thing
{
  [outProtocol writeMessageBeginWithName: @"testMap" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"testMap_args"];
  if (thing != nil)  {
    [outProtocol writeFieldBeginWithName: @"thing" type: TType_MAP fieldID: 1];
    {
      [outProtocol writeMapBeginWithKeyType: TType_I32 valueType: TType_I32 size: [thing count]];
      NSEnumerator * _iter252 = [thing keyEnumerator];
      id key253;
      while ((key253 = [_iter252 nextObject]))
      {
        [outProtocol writeI32: [key253 longValue]];
        [outProtocol writeI32: [[thing objectForKey: key253] longValue]];
      }
      [outProtocol writeMapEnd];
    }
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableDictionary *) recv_testMap
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ThriftTestTestMap_result * result = [[[ThriftTestTestMap_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"testMap failed: unknown result"];
}

- (NSMutableDictionary *) testMap: (NSMutableDictionary *) thing
{
  [self send_testMap : thing];
  return [self recv_testMap];
}

- (void) send_testStringMap: (NSMutableDictionary *) thing
{
  [outProtocol writeMessageBeginWithName: @"testStringMap" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"testStringMap_args"];
  if (thing != nil)  {
    [outProtocol writeFieldBeginWithName: @"thing" type: TType_MAP fieldID: 1];
    {
      [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [thing count]];
      NSEnumerator * _iter254 = [thing keyEnumerator];
      id key255;
      while ((key255 = [_iter254 nextObject]))
      {
        [outProtocol writeString: key255];
        [outProtocol writeString: [thing objectForKey: key255]];
      }
      [outProtocol writeMapEnd];
    }
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableDictionary *) recv_testStringMap
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ThriftTestTestStringMap_result * result = [[[ThriftTestTestStringMap_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"testStringMap failed: unknown result"];
}

- (NSMutableDictionary *) testStringMap: (NSMutableDictionary *) thing
{
  [self send_testStringMap : thing];
  return [self recv_testStringMap];
}

- (void) send_testSet: (NSMutableSet *) thing
{
  [outProtocol writeMessageBeginWithName: @"testSet" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"testSet_args"];
  if (thing != nil)  {
    [outProtocol writeFieldBeginWithName: @"thing" type: TType_SET fieldID: 1];
    {
      [outProtocol writeSetBeginWithElementType: TType_I32 size: [thing count]];
      NSEnumerator * _iter256 = [thing objectEnumerator];
      id obj257;
      while ((obj257 = [_iter256 nextObject]))
      {
        [outProtocol writeI32: [obj257 longValue]];
      }
      [outProtocol writeSetEnd];
    }
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableSet *) recv_testSet
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ThriftTestTestSet_result * result = [[[ThriftTestTestSet_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"testSet failed: unknown result"];
}

- (NSMutableSet *) testSet: (NSMutableSet *) thing
{
  [self send_testSet : thing];
  return [self recv_testSet];
}

- (void) send_testList: (NSMutableArray *) thing
{
  [outProtocol writeMessageBeginWithName: @"testList" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"testList_args"];
  if (thing != nil)  {
    [outProtocol writeFieldBeginWithName: @"thing" type: TType_LIST fieldID: 1];
    {
      [outProtocol writeListBeginWithElementType: TType_I32 size: [thing count]];
      int idx259;
      for (idx259 = 0; idx259 < [thing count]; idx259++)
      {
        [outProtocol writeI32: [[thing objectAtIndex: idx259] longValue]];
      }
      [outProtocol writeListEnd];
    }
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_testList
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ThriftTestTestList_result * result = [[[ThriftTestTestList_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"testList failed: unknown result"];
}

- (NSMutableArray *) testList: (NSMutableArray *) thing
{
  [self send_testList : thing];
  return [self recv_testList];
}

- (void) send_testEnum: (int) thing
{
  [outProtocol writeMessageBeginWithName: @"testEnum" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"testEnum_args"];
  [outProtocol writeFieldBeginWithName: @"thing" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: thing];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (int) recv_testEnum
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ThriftTestTestEnum_result * result = [[[ThriftTestTestEnum_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"testEnum failed: unknown result"];
}

- (int) testEnum: (int) thing
{
  [self send_testEnum : thing];
  return [self recv_testEnum];
}

- (void) send_testTypedef: (ThriftTestUserId) thing
{
  [outProtocol writeMessageBeginWithName: @"testTypedef" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"testTypedef_args"];
  [outProtocol writeFieldBeginWithName: @"thing" type: TType_I64 fieldID: 1];
  [outProtocol writeI64: thing];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (ThriftTestUserId) recv_testTypedef
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ThriftTestTestTypedef_result * result = [[[ThriftTestTestTypedef_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"testTypedef failed: unknown result"];
}

- (ThriftTestUserId) testTypedef: (ThriftTestUserId) thing
{
  [self send_testTypedef : thing];
  return [self recv_testTypedef];
}

- (void) send_testMapMap: (int32_t) hello
{
  [outProtocol writeMessageBeginWithName: @"testMapMap" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"testMapMap_args"];
  [outProtocol writeFieldBeginWithName: @"hello" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: hello];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableDictionary *) recv_testMapMap
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ThriftTestTestMapMap_result * result = [[[ThriftTestTestMapMap_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"testMapMap failed: unknown result"];
}

- (NSMutableDictionary *) testMapMap: (int32_t) hello
{
  [self send_testMapMap : hello];
  return [self recv_testMapMap];
}

- (void) send_testInsanity: (ThriftTestInsanity *) argument
{
  [outProtocol writeMessageBeginWithName: @"testInsanity" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"testInsanity_args"];
  if (argument != nil)  {
    [outProtocol writeFieldBeginWithName: @"argument" type: TType_STRUCT fieldID: 1];
    [argument write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableDictionary *) recv_testInsanity
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ThriftTestTestInsanity_result * result = [[[ThriftTestTestInsanity_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"testInsanity failed: unknown result"];
}

- (NSMutableDictionary *) testInsanity: (ThriftTestInsanity *) argument
{
  [self send_testInsanity : argument];
  return [self recv_testInsanity];
}

- (void) send_testMulti: (uint8_t) arg0 arg1: (int32_t) arg1 arg2: (int64_t) arg2 arg3: (NSMutableDictionary *) arg3 arg4: (int) arg4 arg5: (ThriftTestUserId) arg5
{
  [outProtocol writeMessageBeginWithName: @"testMulti" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"testMulti_args"];
  [outProtocol writeFieldBeginWithName: @"arg0" type: TType_BYTE fieldID: 1];
  [outProtocol writeByte: arg0];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"arg1" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: arg1];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"arg2" type: TType_I64 fieldID: 3];
  [outProtocol writeI64: arg2];
  [outProtocol writeFieldEnd];
  if (arg3 != nil)  {
    [outProtocol writeFieldBeginWithName: @"arg3" type: TType_MAP fieldID: 4];
    {
      [outProtocol writeMapBeginWithKeyType: TType_I16 valueType: TType_STRING size: [arg3 count]];
      NSEnumerator * _iter260 = [arg3 keyEnumerator];
      id key261;
      while ((key261 = [_iter260 nextObject]))
      {
        [outProtocol writeI16: [key261 shortValue]];
        [outProtocol writeString: [arg3 objectForKey: key261]];
      }
      [outProtocol writeMapEnd];
    }
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"arg4" type: TType_I32 fieldID: 5];
  [outProtocol writeI32: arg4];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"arg5" type: TType_I64 fieldID: 6];
  [outProtocol writeI64: arg5];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (ThriftTestXtruct *) recv_testMulti
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ThriftTestTestMulti_result * result = [[[ThriftTestTestMulti_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"testMulti failed: unknown result"];
}

- (ThriftTestXtruct *) testMulti: (uint8_t) arg0 arg1: (int32_t) arg1 arg2: (int64_t) arg2 arg3: (NSMutableDictionary *) arg3 arg4: (int) arg4 arg5: (ThriftTestUserId) arg5
{
  [self send_testMulti : arg0 arg1: arg1 arg2: arg2 arg3: arg3 arg4: arg4 arg5: arg5];
  return [self recv_testMulti];
}

- (void) send_testException: (NSString *) arg
{
  [outProtocol writeMessageBeginWithName: @"testException" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"testException_args"];
  if (arg != nil)  {
    [outProtocol writeFieldBeginWithName: @"arg" type: TType_STRING fieldID: 1];
    [outProtocol writeString: arg];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_testException
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ThriftTestTestException_result * result = [[[ThriftTestTestException_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result err1IsSet]) {
    @throw [result err1];
  }
  return;
}

- (void) testException: (NSString *) arg
{
  [self send_testException : arg];
  [self recv_testException];
}

- (void) send_testMultiException: (NSString *) arg0 arg1: (NSString *) arg1
{
  [outProtocol writeMessageBeginWithName: @"testMultiException" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"testMultiException_args"];
  if (arg0 != nil)  {
    [outProtocol writeFieldBeginWithName: @"arg0" type: TType_STRING fieldID: 1];
    [outProtocol writeString: arg0];
    [outProtocol writeFieldEnd];
  }
  if (arg1 != nil)  {
    [outProtocol writeFieldBeginWithName: @"arg1" type: TType_STRING fieldID: 2];
    [outProtocol writeString: arg1];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (ThriftTestXtruct *) recv_testMultiException
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ThriftTestTestMultiException_result * result = [[[ThriftTestTestMultiException_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result err1IsSet]) {
    @throw [result err1];
  }
  if ([result err2IsSet]) {
    @throw [result err2];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"testMultiException failed: unknown result"];
}

- (ThriftTestXtruct *) testMultiException: (NSString *) arg0 arg1: (NSString *) arg1
{
  [self send_testMultiException : arg0 arg1: arg1];
  return [self recv_testMultiException];
}

- (void) send_testOneway: (int32_t) secondsToSleep
{
  [outProtocol writeMessageBeginWithName: @"testOneway" type: TMessageType_ONEWAY sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"testOneway_args"];
  [outProtocol writeFieldBeginWithName: @"secondsToSleep" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: secondsToSleep];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) testOneway: (int32_t) secondsToSleep
{
  [self send_testOneway : secondsToSleep];
}

@end

@implementation ThriftTestThriftTestProcessor

- (id) initWithThriftTest: (id <ThriftTestThriftTest>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_testVoid_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"testVoid"];
  }
  {
    SEL s = @selector(process_testString_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"testString"];
  }
  {
    SEL s = @selector(process_testByte_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"testByte"];
  }
  {
    SEL s = @selector(process_testI32_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"testI32"];
  }
  {
    SEL s = @selector(process_testI64_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"testI64"];
  }
  {
    SEL s = @selector(process_testDouble_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"testDouble"];
  }
  {
    SEL s = @selector(process_testBinary_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"testBinary"];
  }
  {
    SEL s = @selector(process_testStruct_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"testStruct"];
  }
  {
    SEL s = @selector(process_testNest_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"testNest"];
  }
  {
    SEL s = @selector(process_testMap_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"testMap"];
  }
  {
    SEL s = @selector(process_testStringMap_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"testStringMap"];
  }
  {
    SEL s = @selector(process_testSet_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"testSet"];
  }
  {
    SEL s = @selector(process_testList_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"testList"];
  }
  {
    SEL s = @selector(process_testEnum_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"testEnum"];
  }
  {
    SEL s = @selector(process_testTypedef_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"testTypedef"];
  }
  {
    SEL s = @selector(process_testMapMap_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"testMapMap"];
  }
  {
    SEL s = @selector(process_testInsanity_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"testInsanity"];
  }
  {
    SEL s = @selector(process_testMulti_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"testMulti"];
  }
  {
    SEL s = @selector(process_testException_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"testException"];
  }
  {
    SEL s = @selector(process_testMultiException_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"testMultiException"];
  }
  {
    SEL s = @selector(process_testOneway_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"testOneway"];
  }
  return self;
}

- (id<ThriftTestThriftTest>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_testVoid_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  ThriftTesttestVoid_args * args = [[ThriftTesttestVoid_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ThriftTestTestVoid_result * result = [[ThriftTestTestVoid_result alloc] init];
  [mService testVoid];
  [outProtocol writeMessageBeginWithName: @"testVoid"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_testString_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  ThriftTesttestString_args * args = [[ThriftTesttestString_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ThriftTestTestString_result * result = [[ThriftTestTestString_result alloc] init];
  [result setSuccess: [mService testString: [args thing]]];
  [outProtocol writeMessageBeginWithName: @"testString"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_testByte_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  ThriftTesttestByte_args * args = [[ThriftTesttestByte_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ThriftTestTestByte_result * result = [[ThriftTestTestByte_result alloc] init];
  [result setSuccess: [mService testByte: [args thing]]];
  [outProtocol writeMessageBeginWithName: @"testByte"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_testI32_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  ThriftTesttestI32_args * args = [[ThriftTesttestI32_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ThriftTestTestI32_result * result = [[ThriftTestTestI32_result alloc] init];
  [result setSuccess: [mService testI32: [args thing]]];
  [outProtocol writeMessageBeginWithName: @"testI32"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_testI64_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  ThriftTesttestI64_args * args = [[ThriftTesttestI64_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ThriftTestTestI64_result * result = [[ThriftTestTestI64_result alloc] init];
  [result setSuccess: [mService testI64: [args thing]]];
  [outProtocol writeMessageBeginWithName: @"testI64"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_testDouble_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  ThriftTesttestDouble_args * args = [[ThriftTesttestDouble_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ThriftTestTestDouble_result * result = [[ThriftTestTestDouble_result alloc] init];
  [result setSuccess: [mService testDouble: [args thing]]];
  [outProtocol writeMessageBeginWithName: @"testDouble"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_testBinary_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  ThriftTesttestBinary_args * args = [[ThriftTesttestBinary_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ThriftTestTestBinary_result * result = [[ThriftTestTestBinary_result alloc] init];
  [result setSuccess: [mService testBinary: [args thing]]];
  [outProtocol writeMessageBeginWithName: @"testBinary"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_testStruct_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  ThriftTesttestStruct_args * args = [[ThriftTesttestStruct_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ThriftTestTestStruct_result * result = [[ThriftTestTestStruct_result alloc] init];
  [result setSuccess: [mService testStruct: [args thing]]];
  [outProtocol writeMessageBeginWithName: @"testStruct"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_testNest_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  ThriftTesttestNest_args * args = [[ThriftTesttestNest_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ThriftTestTestNest_result * result = [[ThriftTestTestNest_result alloc] init];
  [result setSuccess: [mService testNest: [args thing]]];
  [outProtocol writeMessageBeginWithName: @"testNest"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_testMap_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  ThriftTesttestMap_args * args = [[ThriftTesttestMap_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ThriftTestTestMap_result * result = [[ThriftTestTestMap_result alloc] init];
  [result setSuccess: [mService testMap: [args thing]]];
  [outProtocol writeMessageBeginWithName: @"testMap"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_testStringMap_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  ThriftTesttestStringMap_args * args = [[ThriftTesttestStringMap_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ThriftTestTestStringMap_result * result = [[ThriftTestTestStringMap_result alloc] init];
  [result setSuccess: [mService testStringMap: [args thing]]];
  [outProtocol writeMessageBeginWithName: @"testStringMap"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_testSet_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  ThriftTesttestSet_args * args = [[ThriftTesttestSet_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ThriftTestTestSet_result * result = [[ThriftTestTestSet_result alloc] init];
  [result setSuccess: [mService testSet: [args thing]]];
  [outProtocol writeMessageBeginWithName: @"testSet"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_testList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  ThriftTesttestList_args * args = [[ThriftTesttestList_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ThriftTestTestList_result * result = [[ThriftTestTestList_result alloc] init];
  [result setSuccess: [mService testList: [args thing]]];
  [outProtocol writeMessageBeginWithName: @"testList"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_testEnum_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  ThriftTesttestEnum_args * args = [[ThriftTesttestEnum_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ThriftTestTestEnum_result * result = [[ThriftTestTestEnum_result alloc] init];
  [result setSuccess: [mService testEnum: [args thing]]];
  [outProtocol writeMessageBeginWithName: @"testEnum"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_testTypedef_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  ThriftTesttestTypedef_args * args = [[ThriftTesttestTypedef_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ThriftTestTestTypedef_result * result = [[ThriftTestTestTypedef_result alloc] init];
  [result setSuccess: [mService testTypedef: [args thing]]];
  [outProtocol writeMessageBeginWithName: @"testTypedef"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_testMapMap_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  ThriftTesttestMapMap_args * args = [[ThriftTesttestMapMap_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ThriftTestTestMapMap_result * result = [[ThriftTestTestMapMap_result alloc] init];
  [result setSuccess: [mService testMapMap: [args hello]]];
  [outProtocol writeMessageBeginWithName: @"testMapMap"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_testInsanity_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  ThriftTesttestInsanity_args * args = [[ThriftTesttestInsanity_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ThriftTestTestInsanity_result * result = [[ThriftTestTestInsanity_result alloc] init];
  [result setSuccess: [mService testInsanity: [args argument]]];
  [outProtocol writeMessageBeginWithName: @"testInsanity"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_testMulti_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  ThriftTesttestMulti_args * args = [[ThriftTesttestMulti_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ThriftTestTestMulti_result * result = [[ThriftTestTestMulti_result alloc] init];
  [result setSuccess: [mService testMulti: [args arg0] arg1: [args arg1] arg2: [args arg2] arg3: [args arg3] arg4: [args arg4] arg5: [args arg5]]];
  [outProtocol writeMessageBeginWithName: @"testMulti"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_testException_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  ThriftTesttestException_args * args = [[ThriftTesttestException_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ThriftTestTestException_result * result = [[ThriftTestTestException_result alloc] init];
  [mService testException: [args arg]];
  [outProtocol writeMessageBeginWithName: @"testException"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_testMultiException_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  ThriftTesttestMultiException_args * args = [[ThriftTesttestMultiException_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ThriftTestTestMultiException_result * result = [[ThriftTestTestMultiException_result alloc] init];
  [result setSuccess: [mService testMultiException: [args arg0] arg1: [args arg1]]];
  [outProtocol writeMessageBeginWithName: @"testMultiException"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_testOneway_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  ThriftTesttestOneway_args * args = [[ThriftTesttestOneway_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  [mService testOneway: [args secondsToSleep]];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

@interface ThriftTestblahBlah_args : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation ThriftTestblahBlah_args

- (id) init
{
self = [super init];
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
NSUInteger hash = 17;
return hash;
}

- (BOOL) isEqual: (id) anObject
{
if (self == anObject) {
  return YES;
}
if (![anObject isKindOfClass:[ThriftTestblahBlah_args class]]) {
  return NO;
}
ThriftTestblahBlah_args *other = (ThriftTestblahBlah_args *)anObject;
return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
[self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"blahBlah_args"];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestblahBlah_args("];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface ThriftTestBlahBlah_result : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation ThriftTestBlahBlah_result

- (id) init
{
self = [super init];
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
NSUInteger hash = 17;
return hash;
}

- (BOOL) isEqual: (id) anObject
{
if (self == anObject) {
  return YES;
}
if (![anObject isKindOfClass:[ThriftTestBlahBlah_result class]]) {
  return NO;
}
ThriftTestBlahBlah_result *other = (ThriftTestBlahBlah_result *)anObject;
return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
[self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"BlahBlah_result"];

[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestBlahBlah_result("];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface ThriftTestsecondtestString_args : NSObject <TBase, NSCoding> {
NSString * __thing;

BOOL __thing_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=thing, setter=setThing:) NSString * thing;
#endif

- (id) init;
- (id) initWithThing: (NSString *) thing;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) thing;
- (void) setThing: (NSString *) thing;
#endif
- (BOOL) thingIsSet;

@end

@implementation ThriftTestsecondtestString_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithThing: (NSString *) thing
{
self = [super init];
__thing = [thing retain_stub];
__thing_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"thing"])
{
  __thing = [[decoder decodeObjectForKey: @"thing"] retain_stub];
  __thing_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__thing_isset)
{
  [encoder encodeObject: __thing forKey: @"thing"];
}
}

- (NSUInteger) hash
{
NSUInteger hash = 17;
hash = (hash * 31) ^ __thing_isset ? 2654435761 : 0;
if (__thing_isset)
{
  hash = (hash * 31) ^ [__thing hash];
}
return hash;
}

- (BOOL) isEqual: (id) anObject
{
if (self == anObject) {
  return YES;
}
if (![anObject isKindOfClass:[ThriftTestsecondtestString_args class]]) {
  return NO;
}
ThriftTestsecondtestString_args *other = (ThriftTestsecondtestString_args *)anObject;
if ((__thing_isset != other->__thing_isset) ||
    (__thing_isset && ((__thing || other->__thing) && ![__thing isEqual:other->__thing]))) {
  return NO;
}
return YES;
}

- (void) dealloc
{
[__thing release_stub];
[super dealloc_stub];
}

- (NSString *) thing {
return [[__thing retain_stub] autorelease_stub];
}

- (void) setThing: (NSString *) thing {
[thing retain_stub];
[__thing release_stub];
__thing = thing;
__thing_isset = YES;
}

- (BOOL) thingIsSet {
return __thing_isset;
}

- (void) unsetThing {
[__thing release_stub];
__thing = nil;
__thing_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 1:
      if (fieldType == TType_STRING) {
        NSString * fieldValue = [inProtocol readString];
        [self setThing: fieldValue];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
[self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"secondtestString_args"];
if (__thing_isset) {
  if (__thing != nil) {
    [outProtocol writeFieldBeginWithName: @"thing" type: TType_STRING fieldID: 1];
    [outProtocol writeString: __thing];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestsecondtestString_args("];
[ms appendString: @"thing:"];
[ms appendFormat: @"\"%@\"", __thing];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface ThriftTestSecondtestString_result : NSObject <TBase, NSCoding> {
NSString * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ThriftTestSecondtestString_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (NSString *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
  __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
  __success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
  [encoder encodeObject: __success forKey: @"success"];
}
}

- (NSUInteger) hash
{
NSUInteger hash = 17;
hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
if (__success_isset)
{
  hash = (hash * 31) ^ [__success hash];
}
return hash;
}

- (BOOL) isEqual: (id) anObject
{
if (self == anObject) {
  return YES;
}
if (![anObject isKindOfClass:[ThriftTestSecondtestString_result class]]) {
  return NO;
}
ThriftTestSecondtestString_result *other = (ThriftTestSecondtestString_result *)anObject;
if ((__success_isset != other->__success_isset) ||
    (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
  return NO;
}
return YES;
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (NSString *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 0:
      if (fieldType == TType_STRING) {
        NSString * fieldValue = [inProtocol readString];
        [self setSuccess: fieldValue];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
[self validate];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"SecondtestString_result"];

if (__success_isset) {
  if (__success != nil) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
    [outProtocol writeString: __success];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"ThriftTestSecondtestString_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"\"%@\"", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ThriftTestSecondServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_blahBlah
{
[outProtocol writeMessageBeginWithName: @"blahBlah" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"blahBlah_args"];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (void) recv_blahBlah
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
ThriftTestBlahBlah_result * result = [[[ThriftTestBlahBlah_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
return;
}

- (void) blahBlah
{
[self send_blahBlah];
[self recv_blahBlah];
}

- (void) send_secondtestString: (NSString *) thing
{
[outProtocol writeMessageBeginWithName: @"secondtestString" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"secondtestString_args"];
if (thing != nil){
  [outProtocol writeFieldBeginWithName: @"thing" type: TType_STRING fieldID: 1];
  [outProtocol writeString: thing];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (NSString *) recv_secondtestString
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
ThriftTestSecondtestString_result * result = [[[ThriftTestSecondtestString_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"secondtestString failed: unknown result"];
}

- (NSString *) secondtestString: (NSString *) thing
{
[self send_secondtestString : thing];
return [self recv_secondtestString];
}

@end

@implementation ThriftTestSecondServiceProcessor

- (id) initWithSecondService: (id <ThriftTestSecondService>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
  SEL s = @selector(process_blahBlah_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"blahBlah"];
}
{
  SEL s = @selector(process_secondtestString_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"secondtestString"];
}
return self;
}

- (id<ThriftTestSecondService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_blahBlah_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
ThriftTestblahBlah_args * args = [[ThriftTestblahBlah_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
ThriftTestBlahBlah_result * result = [[ThriftTestBlahBlah_result alloc] init];
[mService blahBlah];
[outProtocol writeMessageBeginWithName: @"blahBlah"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_secondtestString_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
ThriftTestsecondtestString_args * args = [[ThriftTestsecondtestString_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
ThriftTestSecondtestString_result * result = [[ThriftTestSecondtestString_result alloc] init];
[result setSuccess: [mService secondtestString: [args thing]]];
[outProtocol writeMessageBeginWithName: @"secondtestString"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

